// <auto-generated />
using System;
using KristaShop.DataAccess.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KristaShop.DataAccess.Migrations
{
    [DbContext(typeof(KristaShopDbContext))]
    [Migration("20201209153600_UpdateMenuItems")]
    partial class UpdateMenuItems
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("KristaShop.DataAccess.Entities.AppliedImport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("ApplyDate")
                        .HasColumnName("apply_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BackupFile")
                        .IsRequired()
                        .HasColumnName("backup_file_path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasColumnName("key_value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("applied_imports");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.AuthorizationLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("random_code")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnName("login_date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RecordTimeStamp")
                        .HasColumnName("record_time_stamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type")
                        .HasColumnType("INT(11)")
                        .HasDefaultValueSql("0");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnName("valid_to")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("authorization_link");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.BannerItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnName("caption")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnName("image_path")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsVisible")
                        .HasColumnName("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnName("link")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("TitleColor")
                        .IsRequired()
                        .HasColumnName("title_color")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("banner_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.BlogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnName("image_path")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsVisible")
                        .HasColumnName("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnName("link")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LinkText")
                        .IsRequired()
                        .HasColumnName("link_text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("blog_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Cart1CItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(8)");

                    b.Property<int>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("int(6)");

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasColumnName("articul")
                        .HasColumnType("varchar(64)");

                    b.Property<int>("CatalogId")
                        .HasColumnName("catalog_id")
                        .HasColumnType("int(8)");

                    b.Property<int>("ColorId")
                        .HasColumnName("color_id")
                        .HasColumnType("int(8)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("datetime");

                    b.Property<int>("ModelId")
                        .HasColumnName("model_id")
                        .HasColumnType("int(8)");

                    b.Property<int>("NomenclatureId")
                        .HasColumnName("nomenclature_id")
                        .HasColumnType("int(8)");

                    b.Property<double>("Price")
                        .HasColumnName("price")
                        .HasColumnType("double");

                    b.Property<double>("PriceInRub")
                        .HasColumnName("price_rub")
                        .HasColumnType("double");

                    b.Property<string>("SizeValue")
                        .IsRequired()
                        .HasColumnName("size_value")
                        .HasColumnType("varchar(32)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(8)");

                    b.HasKey("Id");

                    b.ToTable("cart_items_1c");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CartItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("discount")
                        .HasColumnType("double");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<int>("order_form_type")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.Property<Guid>("product_id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("total_amount")
                        .HasColumnType("double");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("cart_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Catalog", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("CatalogId1C")
                        .HasColumnName("catalog_id_1c")
                        .HasColumnType("int");

                    b.Property<string>("additional_description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset?>("close_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("is_disable_discount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_open")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_set")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("meta_description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_keywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<int>("order_form")
                        .HasColumnType("int");

                    b.Property<string>("preview_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("uri")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("video_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("id");

                    b.ToTable("dict_catalogs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CatalogDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("CatalogId")
                        .HasColumnName("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("DiscountPrice")
                        .HasColumnName("discount_price")
                        .HasColumnType("double");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("catalog_discounts");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CatalogItemDescriptor", b =>
                {
                    b.Property<string>("Articul")
                        .HasColumnName("articul")
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("AddDate")
                        .HasColumnName("add_date")
                        .HasColumnType("datetime");

                    b.Property<string>("AltText")
                        .HasColumnName("alt_text")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("MainPhoto")
                        .HasColumnName("main_photo")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("MetaDescription")
                        .HasColumnName("meta_description")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasColumnName("meta_keywords")
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .HasColumnName("meta_title")
                        .HasColumnType("text");

                    b.Property<string>("VideoLink")
                        .HasColumnName("video_link")
                        .HasColumnType("text");

                    b.HasKey("Articul");

                    b.ToTable("catalog_item_descriptor");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Category", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("CategoryId1C")
                        .HasColumnName("category_id_1c")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("image_path")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("dict_category");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.NewUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<int?>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("int");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("fullname")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Login")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MallAddress")
                        .IsRequired()
                        .HasColumnName("mall_address")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("int");

                    b.Property<string>("NewCity")
                        .HasColumnName("new_city")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("for1c_new_users");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasDefaultValue("");

                    b.Property<bool>("HasExtraPack")
                        .HasColumnName("has_extra_pack")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsProcessedPreorder")
                        .HasColumnName("is_processed_preorder")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsProcessedRetail")
                        .HasColumnName("is_processed_retail")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasColumnName("user_login")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("for1c_orders");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("int");

                    b.Property<int>("CatalogId")
                        .HasColumnName("catalog_id")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnName("color_id")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnName("model_id")
                        .HasColumnType("int");

                    b.Property<int>("NomenclatureId")
                        .HasColumnName("nomenclature_id")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnName("price")
                        .HasColumnType("double");

                    b.Property<double>("PriceInRub")
                        .HasColumnName("price_in_rub")
                        .HasColumnType("double");

                    b.Property<string>("SizeValue")
                        .IsRequired()
                        .HasColumnName("size_value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StorehouseId")
                        .HasColumnName("storehouse_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("for1c_order_details");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.UserNewPassword", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("PasswordSrc")
                        .IsRequired()
                        .HasColumnName("password_src")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("UserId");

                    b.ToTable("for1c_user_new_passwords");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("ColorCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("faq");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("FaqId")
                        .HasColumnName("faq_id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("FaqId");

                    b.ToTable("faq_section");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(5000);

                    b.Property<Guid>("FaqSectionId")
                        .HasColumnName("faq_section_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("FaqSectionId");

                    b.ToTable("faq_section_content");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("FaqSectionContentId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FaqSectionContentId");

                    b.ToTable("FaqSectionContentFile");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Favorite1CItemItem", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(8)");

                    b.Property<string>("Articul")
                        .HasColumnName("articul")
                        .HasColumnType("varchar(64)");

                    b.Property<int>("CatalogId")
                        .HasColumnName("catalog_id")
                        .HasColumnType("int(8)");

                    b.HasKey("UserId", "Articul", "CatalogId");

                    b.ToTable("favorite_items_1c");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("Person")
                        .IsRequired()
                        .HasColumnName("person")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("RecordTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("record_time_stamp")
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<Guid>("ReviewerUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("binary(16)")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("INT(11)");

                    b.Property<DateTime?>("ViewTimeStamp")
                        .HasColumnName("view_time_stamp")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Viewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("viewed")
                        .HasColumnType("TINYINT(1)")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("feedback_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FeedbackFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_date")
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnName("filename")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<Guid>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("VirtualPath")
                        .IsRequired()
                        .HasColumnName("virtual_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("feedback_files");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.GalleryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnName("image_path")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsVisible")
                        .HasColumnName("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnName("link")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LinkText")
                        .IsRequired()
                        .HasColumnName("link_text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("gallery_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.MenuContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImagePath")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("image_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256)
                        .HasDefaultValue("");

                    b.Property<bool>("IsOpen")
                        .HasColumnName("is_authorize")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSinglePage")
                        .HasColumnName("is_single_page")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisibleInMenu")
                        .HasColumnName("is_visible_in_menu")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasColumnName("layout")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("MetaDescription")
                        .HasColumnName("meta_description")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("MetaKeywords")
                        .HasColumnName("meta_keywords")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("MetaTitle")
                        .HasColumnName("meta_title")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("TitleIconPath")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("title_icon_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256)
                        .HasDefaultValue("");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("menu_contents");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnName("action_name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnName("area_name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnName("controller_name")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MenuType")
                        .HasColumnName("menu_type")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("int");

                    b.Property<string>("Parameters")
                        .HasColumnName("parameters")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("menu_items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56fba3aa-25d8-4de6-b166-5da83192be99"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Home",
                            Icon = "krista-home",
                            MenuType = 999,
                            Order = 1,
                            Title = "Главная страница"
                        },
                        new
                        {
                            Id = new Guid("46ad49f1-21f3-48d9-bfa2-68137af8900b"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Identity",
                            Icon = "krista-user",
                            MenuType = 999,
                            Order = 10,
                            Title = "Клиенты"
                        },
                        new
                        {
                            Id = new Guid("cedfe1cf-4c35-4ed0-a576-f05ab5e01414"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Feedback",
                            Icon = "krista-chat",
                            MenuType = 999,
                            Order = 20,
                            Title = "Связь с клиентами"
                        },
                        new
                        {
                            Id = new Guid("c66fe088-7df4-4739-bedb-147b843cb834"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "MBody",
                            Icon = "krista-media",
                            MenuType = 999,
                            Order = 30,
                            Title = "Мультимедия"
                        },
                        new
                        {
                            Id = new Guid("54297317-28ed-4abf-bd7f-bf3be9edac79"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Catalog",
                            Icon = "krista-hanger",
                            MenuType = 999,
                            Order = 40,
                            Title = "Работа с моделями"
                        },
                        new
                        {
                            Id = new Guid("8f1ff3c9-8f48-499d-ac33-240a3216f721"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Faq",
                            Icon = "krista-info",
                            MenuType = 999,
                            Order = 70,
                            Title = "Воронка"
                        },
                        new
                        {
                            Id = new Guid("c29da4a1-ea6d-4649-88a6-134fecb7bc24"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Settings",
                            Icon = "krista-settings",
                            MenuType = 999,
                            Order = 80,
                            Title = "Настройки системы"
                        },
                        new
                        {
                            Id = new Guid("0f0bd978-3a1a-4fcd-b710-70b0b90e0ff7"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "MBody",
                            Icon = "",
                            MenuType = 1,
                            Order = 1,
                            ParentId = new Guid("c66fe088-7df4-4739-bedb-147b843cb834"),
                            Title = "Контент страниц"
                        },
                        new
                        {
                            Id = new Guid("ffc7d8ff-b78f-4c99-9bdd-8084d1a7c098"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Blog",
                            Icon = "",
                            MenuType = 1,
                            Order = 10,
                            ParentId = new Guid("c66fe088-7df4-4739-bedb-147b843cb834"),
                            Title = "Блог"
                        },
                        new
                        {
                            Id = new Guid("b525d487-7d6a-4b1c-8776-380a6b695462"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Gallery",
                            Icon = "",
                            MenuType = 1,
                            Order = 20,
                            ParentId = new Guid("c66fe088-7df4-4739-bedb-147b843cb834"),
                            Title = "Галерея"
                        },
                        new
                        {
                            Id = new Guid("9521365b-2f09-4138-b5b5-fe15d1dc2b70"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Banner",
                            Icon = "",
                            MenuType = 1,
                            Order = 30,
                            ParentId = new Guid("c66fe088-7df4-4739-bedb-147b843cb834"),
                            Title = "Баннер"
                        },
                        new
                        {
                            Id = new Guid("76f02dd3-31bf-4910-ba35-8ffdeb4398a7"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "VideoGallery",
                            Icon = "",
                            MenuType = 1,
                            Order = 40,
                            ParentId = new Guid("c66fe088-7df4-4739-bedb-147b843cb834"),
                            Title = "Видеогалерея"
                        },
                        new
                        {
                            Id = new Guid("9898ef9a-8e22-4fb4-ac98-a20911ffa5f3"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Catalog",
                            Icon = "",
                            MenuType = 1,
                            Order = 1,
                            ParentId = new Guid("54297317-28ed-4abf-bd7f-bf3be9edac79"),
                            Title = "Каталоги"
                        },
                        new
                        {
                            Id = new Guid("c9ef8cb8-ff17-4b9d-aa51-4da8c7e3d055"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Category",
                            Icon = "",
                            MenuType = 1,
                            Order = 10,
                            ParentId = new Guid("54297317-28ed-4abf-bd7f-bf3be9edac79"),
                            Title = "Категории"
                        },
                        new
                        {
                            Id = new Guid("cc811614-fdf0-4d4a-89c8-e23f9be12dc7"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "CModel",
                            Icon = "",
                            MenuType = 1,
                            Order = 20,
                            ParentId = new Guid("54297317-28ed-4abf-bd7f-bf3be9edac79"),
                            Title = "Модели"
                        },
                        new
                        {
                            Id = new Guid("f79ed663-09f4-42f8-9add-ac8551df6124"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Settings",
                            Icon = "",
                            MenuType = 1,
                            Order = 1,
                            ParentId = new Guid("c29da4a1-ea6d-4649-88a6-134fecb7bc24"),
                            Title = "Настройки"
                        },
                        new
                        {
                            Id = new Guid("f8949e4a-a06c-4955-94a5-c833968ea2a2"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Menu",
                            Icon = "",
                            MenuType = 1,
                            Order = 10,
                            ParentId = new Guid("c29da4a1-ea6d-4649-88a6-134fecb7bc24"),
                            Title = "Пункты меню"
                        },
                        new
                        {
                            Id = new Guid("ada79b75-9681-41c5-80d5-13d47cb8c522"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "UrlAcl",
                            Icon = "",
                            MenuType = 1,
                            Order = 20,
                            ParentId = new Guid("c29da4a1-ea6d-4649-88a6-134fecb7bc24"),
                            Title = "Доступ по URL"
                        },
                        new
                        {
                            Id = new Guid("4b8dec48-c770-4c56-8bb0-5c0409d4abef"),
                            ActionName = "Execute",
                            AreaName = "Admin",
                            ControllerName = "Import",
                            Icon = "",
                            MenuType = 1,
                            Order = 30,
                            ParentId = new Guid("c29da4a1-ea6d-4649-88a6-134fecb7bc24"),
                            Title = "Импорт"
                        });
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.ModelPhoto1C", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(8)");

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasColumnName("articul")
                        .HasColumnType("varchar(64)");

                    b.Property<int?>("ColorId")
                        .HasColumnName("color_id")
                        .HasColumnType("int(8)");

                    b.Property<string>("OldPhotoPath")
                        .IsRequired()
                        .HasColumnName("old_photo_path")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order")
                        .HasColumnType("int(6)")
                        .HasDefaultValue(0);

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnName("photo_path")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Articul", "Order");

                    b.ToTable("model_photos_1c");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NewUsersCounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<long>("Counter")
                        .HasColumnName("counter")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdateTimestamp")
                        .HasColumnName("update_time_stamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("new_users_counter");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCatalog", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_catalog");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCatalog1C", b =>
                {
                    b.Property<string>("Articul")
                        .HasColumnName("articul")
                        .HasColumnType("varchar(64)");

                    b.Property<int>("CatalogId")
                        .HasColumnName("catalog_id")
                        .HasColumnType("int(8)");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("int(6)");

                    b.HasKey("Articul", "CatalogId");

                    b.ToTable("nom_catalog_1c");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCategory", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("category_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_category");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("DiscountPrice")
                        .HasColumnName("discount_price")
                        .HasColumnType("double");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("NomenclatureId")
                        .HasColumnName("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureId");

                    b.ToTable("nom_discounts");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomDiscountCatalog", b =>
                {
                    b.Property<Guid>("DiscountId")
                        .HasColumnName("nom_discount_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("CatalogId")
                        .HasColumnName("catalog_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("DiscountId", "CatalogId");

                    b.HasIndex("CatalogId");

                    b.ToTable("nom_discounts_catalogs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomPhoto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid?>("color_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("old_photo_path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<string>("photo_path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_photos");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomPreorder", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("counter")
                        .HasColumnType("int");

                    b.Property<int>("max_amout")
                        .HasColumnType("int");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_preorder");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomProdPrice", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.Property<Guid>("product_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_prod_price");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomUserFavorite", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_user_favorites");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomenclatureModel", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("articul")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("default_price")
                        .HasColumnType("double");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("image_alternative_text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("image_path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("is_set")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("link_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_keywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("parts_count")
                        .HasColumnType("double");

                    b.Property<string>("youtube_link")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("nomenclatures");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NotVisibleProdCtgr", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("category_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("product_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.HasIndex("nom_id");

                    b.ToTable("not_visible_prod_ctgrs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NotVisibleProdCtlg", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("product_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.HasIndex("nom_id");

                    b.ToTable("not_visible_prod_ctlgs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.PromoLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("DeactivateTime")
                        .HasColumnName("link_deactivate_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnName("link")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("int");

                    b.Property<int>("OrderForm")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("VideoPath")
                        .HasColumnName("video_link")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("VideoPreviewPath")
                        .HasColumnName("video_preview_link")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("promo_link");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Settings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<bool>("OnlyRootAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("only_root_access")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("dict_settings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afd36311-a384-4105-946d-e2d388ab072c"),
                            Description = "Ссылка на оптовый аккаунт инстаграм",
                            Key = "KristaInstagram",
                            OnlyRootAccess = false,
                            Value = "https://www.instagram.com/krista.fashion/"
                        },
                        new
                        {
                            Id = new Guid("7f1c2461-2d69-4af4-9f77-15991cc420bd"),
                            Description = "Ссылка на оптовый аккаунт фэйсбук",
                            Key = "KristaFacebook",
                            OnlyRootAccess = false,
                            Value = "https://www.facebook.com/kristafashion-101281188115170/"
                        },
                        new
                        {
                            Id = new Guid("e509c422-9e1c-4372-bfc6-a0641ab65a55"),
                            Description = "Ссылка на оптовый аккаунт ютуб",
                            Key = "KristaYoutube",
                            OnlyRootAccess = false,
                            Value = "https://www.youtube.com/channel/UCXftbG5dwIDgWGR_WKOj5CQ"
                        },
                        new
                        {
                            Id = new Guid("6a2467aa-13de-45bf-9772-8d1a53f76541"),
                            Description = "Ссылка на подписку на оптовый аккаунт ютуб",
                            Key = "KristaYoutubeSubscribe",
                            OnlyRootAccess = false,
                            Value = "https://www.youtube.com/channel/UCXftbG5dwIDgWGR_WKOj5CQ?sub_confirmation=1"
                        },
                        new
                        {
                            Id = new Guid("f7c7016c-2a60-4e51-b6c5-9db7e61e1aa0"),
                            Description = "Ссылка на оптовый аккаунт в контакте",
                            Key = "KristaVk",
                            OnlyRootAccess = false,
                            Value = "https://www.vk.com/"
                        },
                        new
                        {
                            Id = new Guid("d5f1181d-89e6-4e6a-900e-2d0b5017f4f4"),
                            Description = "Путь к политике конфиденциальности",
                            Key = "TermsOfUse",
                            OnlyRootAccess = false,
                            Value = "/Privacy/Index"
                        },
                        new
                        {
                            Id = new Guid("5e3da824-8a53-4028-af75-f270bec049d0"),
                            Description = "Путь данным о доставке",
                            Key = "DeliveryDetails",
                            OnlyRootAccess = false,
                            Value = "/Cooperation/Delivery"
                        },
                        new
                        {
                            Id = new Guid("adee4fd9-878d-45a6-aed7-2cff2df6b123"),
                            Description = "Путь к данным об оплате",
                            Key = "PaymentDetails",
                            OnlyRootAccess = false,
                            Value = "/Cooperation/Payment"
                        },
                        new
                        {
                            Id = new Guid("b1a20574-b8db-41d0-b007-d77efa9219ee"),
                            Description = "Путь к контактам в футере",
                            Key = "FooterContacts",
                            OnlyRootAccess = false,
                            Value = "/Footer/Contacts"
                        },
                        new
                        {
                            Id = new Guid("d7863668-5d04-490d-b357-4c4aba7eb6d5"),
                            Description = "Путь к описанию на странице категориий",
                            Key = "CategoriesDescription",
                            OnlyRootAccess = false,
                            Value = "/Category/Index"
                        },
                        new
                        {
                            Id = new Guid("f4538f14-00df-4616-a3f7-d3edcf622fb2"),
                            Description = "Путь к дополнительному описанию открытого каталога при поиске",
                            Key = "OpenCatalogSearchDescription",
                            OnlyRootAccess = false,
                            Value = "/Search/OpenCatalog"
                        },
                        new
                        {
                            Id = new Guid("dfc70e24-ad7d-4283-9ad1-e9580af64ada"),
                            Description = "Сообщение при успешном совершениии покупки",
                            Key = "CartSuccess",
                            OnlyRootAccess = false,
                            Value = "Спасибо за покупку"
                        });
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.UrlAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("ForManager")
                        .HasColumnName("for_manager")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ForRootOnly")
                        .HasColumnName("for_root")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("url_access");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.UserData", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastSignIn")
                        .HasColumnName("last_sign_in")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.ToTable("user_data");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.UserDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("DiscountPrice")
                        .HasColumnName("discount_price")
                        .HasColumnType("double");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.ToTable("user_discounts");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsVisible")
                        .HasColumnName("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PreviewPath")
                        .IsRequired()
                        .HasColumnName("preview_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnName("video_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("gallery_video");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VideoGallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.Property<bool>("IsOpen")
                        .HasColumnName("is_open")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisible")
                        .HasColumnName("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("PreviewPath")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("preview_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("''")
                        .HasMaxLength(256);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("VideoPath")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("video_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("''")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("video_gallery");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VideoGalleryVideos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("GalleryId")
                        .HasColumnName("gallery_id")
                        .HasColumnType("binary(16)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("VideoId")
                        .HasColumnName("video_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.HasIndex("VideoId");

                    b.ToTable("video_gallery_videos");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VisibleNomUser", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("visible_nom_users");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VisibleUserCatalog", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.ToTable("visible_user_catalogs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CartItem", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CatalogDiscount", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("CatalogDiscounts")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.OrderDetails", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.DataFor1C.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSection", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Faq", "Faq")
                        .WithMany("FaqSections")
                        .HasForeignKey("FaqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContent", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.FaqSection", "FaqSection")
                        .WithMany("FaqSectionContents")
                        .HasForeignKey("FaqSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContentFile", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.FaqSectionContent", "FaqSectionContent")
                        .WithMany("FaqSectionContentFiles")
                        .HasForeignKey("FaqSectionContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FeedbackFile", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Feedback", "Feedback")
                        .WithMany("Files")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.MenuItem", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.MenuItem", "ParentItem")
                        .WithMany("ChildItems")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCatalog", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomCatalogs")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCategory", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomCategories")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomDiscount", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomDiscounts")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomDiscountCatalog", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("NomDiscounts")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomDiscount", "Discount")
                        .WithMany("DiscountCatalogs")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomPhoto", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomPhotos")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomPreorder", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomProdPrice", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomUserFavorite", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("NomUserFavorites")
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomUserFavorites")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NotVisibleProdCtgr", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NotVisibleProdCtlg", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VideoGalleryVideos", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.VideoGallery", "Gallery")
                        .WithMany("VideoGalleryVideos")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.Video", "Video")
                        .WithMany("VideoGalleryVideos")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VisibleNomUser", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("VisibleNomUsers")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VisibleUserCatalog", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("VisibleCatalogUsers")
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
