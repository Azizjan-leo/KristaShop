// <auto-generated />
using System;
using KristaShop.DataAccess.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KristaShop.DataAccess.Migrations
{
    [DbContext(typeof(KristaShopDbContext))]
    [Migration("20200709184815_add_new_columns")]
    partial class add_new_columns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("KristaShop.DataAccess.Entities.AuthorizationLink", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<DateTime?>("login_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("random_code")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("record_time_stamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTime?>("valid_to")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("authorization_link");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.BannerItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("caption")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("image_path")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("id");

                    b.ToTable("banner_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.BlogItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("image_path")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("id");

                    b.ToTable("blog_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CartItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("discount")
                        .HasColumnType("double");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<int>("order_form_type")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.Property<Guid>("product_id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("total_amount")
                        .HasColumnType("double");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("cart_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Catalog", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("additional_description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("is_disable_discount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_open")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_set")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("meta_description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_keywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<int>("order_form")
                        .HasColumnType("int");

                    b.Property<string>("uri")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("id");

                    b.ToTable("dict_catalogs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CatalogDiscount", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("discount_price")
                        .HasColumnType("double");

                    b.Property<DateTime?>("end_date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("start_date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.ToTable("catalog_discounts");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Category", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("image_path")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("dict_category");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("email")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("person")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("record_time_stamp")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTime?>("view_time_stamp")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("viewed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("feedback_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.GalleryItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("image_path")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("gallery_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.MenuContent", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("body")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("is_authorize")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("layout")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("meta_description")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("meta_keywords")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("meta_title")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("id");

                    b.ToTable("menu_contents");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("action_name")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("controller_name")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("icon")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("menu_type")
                        .HasColumnType("int");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<string>("parameters")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("url")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("id");

                    b.ToTable("menu_items");

                    b.HasData(
                        new
                        {
                            id = new Guid("f02c5904-b479-4eb6-8420-5c296b0d9078"),
                            action_name = "Index",
                            controller_name = "Admin/Home",
                            icon = "fa-home",
                            menu_type = 999,
                            order = 1,
                            title = "Главная"
                        },
                        new
                        {
                            id = new Guid("17c0a425-5e81-4c0c-ac40-55ffc62b04e0"),
                            action_name = "Index",
                            controller_name = "Admin/Menu",
                            icon = "fa-bars",
                            menu_type = 999,
                            order = 2,
                            title = "Пункты меню"
                        },
                        new
                        {
                            id = new Guid("f56b75c2-1a31-434f-adb7-32155de47959"),
                            action_name = "Index",
                            controller_name = "Admin/MBody",
                            icon = "fa-file-code",
                            menu_type = 999,
                            order = 3,
                            title = "Контент страниц"
                        },
                        new
                        {
                            id = new Guid("9b133739-eac7-4f24-ade4-1f623b29f442"),
                            action_name = "Index",
                            controller_name = "Admin/Catalog",
                            icon = "fa-th",
                            menu_type = 999,
                            order = 4,
                            title = "Каталоги"
                        },
                        new
                        {
                            id = new Guid("3bb4efa1-1e25-4eda-a6f8-ae114e46bc00"),
                            action_name = "Index",
                            controller_name = "Admin/Category",
                            icon = "fa-tags",
                            menu_type = 999,
                            order = 5,
                            title = "Категории"
                        },
                        new
                        {
                            id = new Guid("68e20f29-b595-4c0b-9282-65f816808f9a"),
                            action_name = "Index",
                            controller_name = "Admin/CModel",
                            icon = "fa-eye",
                            menu_type = 999,
                            order = 6,
                            title = "Модели"
                        },
                        new
                        {
                            id = new Guid("c88d494d-46e7-4834-91d7-453222d27c41"),
                            action_name = "Index",
                            controller_name = "Admin/Discount",
                            icon = "fa-percent",
                            menu_type = 999,
                            order = 7,
                            title = "Скидки"
                        },
                        new
                        {
                            id = new Guid("c9736b11-9195-4416-aa69-1933d1f71ff0"),
                            action_name = "Index",
                            controller_name = "Admin/Blog",
                            icon = "fa-blog",
                            menu_type = 999,
                            order = 8,
                            title = "Блог"
                        },
                        new
                        {
                            id = new Guid("6760ed7a-6f76-4408-b430-4e26544c9747"),
                            action_name = "Index",
                            controller_name = "Admin/Gallery",
                            icon = "fa-images",
                            menu_type = 999,
                            order = 9,
                            title = "Галерея"
                        },
                        new
                        {
                            id = new Guid("767e9420-954d-48f8-8988-af226f9d7740"),
                            action_name = "Index",
                            controller_name = "Admin/Feedback",
                            icon = "fa-mail-bulk",
                            menu_type = 999,
                            order = 10,
                            title = "Сообщения"
                        },
                        new
                        {
                            id = new Guid("653953b4-da30-4d0f-a338-3f54f46df6d5"),
                            action_name = "Index",
                            controller_name = "Admin/Banner",
                            icon = "fa-bullhorn",
                            menu_type = 999,
                            order = 12,
                            title = "Баннер"
                        },
                        new
                        {
                            id = new Guid("fb2f4e69-6741-4ba6-a65a-c04319845ad1"),
                            action_name = "Index",
                            controller_name = "Admin/UrlAcl",
                            icon = "fa-link",
                            menu_type = 999,
                            order = 100,
                            title = "Доступ по URL"
                        });
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCatalog", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_catalog");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCategory", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("category_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_category");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomDiscount", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<double>("discount_price")
                        .HasColumnType("double");

                    b.Property<DateTime?>("end_date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTime?>("start_date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_discounts");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomPhoto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid?>("color_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("old_photo_path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<string>("photo_path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_photos");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomPreorder", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("counter")
                        .HasColumnType("int");

                    b.Property<int>("max_amout")
                        .HasColumnType("int");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_preorder");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomProdPrice", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.Property<Guid>("product_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_prod_price");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomUserFavorite", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_user_favorites");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomenclatureModel", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("articul")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("default_price")
                        .HasColumnType("double");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("image_path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("is_set")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("link_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_keywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("parts_count")
                        .HasColumnType("double");

                    b.Property<string>("youtube_link")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("nomenclatures");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NotVisibleProdCtgr", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("category_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("product_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.HasIndex("nom_id");

                    b.ToTable("not_visible_prod_ctgrs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NotVisibleProdCtlg", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("product_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.HasIndex("nom_id");

                    b.ToTable("not_visible_prod_ctlgs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Setting", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("key")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.HasKey("id");

                    b.ToTable("dict_settings");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.UrlAccess", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("access_groups_json")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("acl")
                        .HasColumnType("int");

                    b.Property<string>("denied_groups_json")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("url_access");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.UserDiscount", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<double>("discount_price")
                        .HasColumnType("double");

                    b.Property<DateTime?>("end_date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("start_date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.ToTable("user_discounts");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VisibleNomUser", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("visible_nom_users");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VisibleUserCatalog", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.ToTable("visible_user_catalogs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CartItem", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CatalogDiscount", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCatalog", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("NomCatalogs")
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomCatalogs")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCategory", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Category", "Category")
                        .WithMany("NomCategories")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomCategories")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomDiscount", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomDiscounts")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomPhoto", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomPhotos")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomPreorder", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomProdPrice", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomUserFavorite", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("NomUserFavorites")
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomUserFavorites")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NotVisibleProdCtgr", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NotVisibleProdCtlg", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VisibleNomUser", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("VisibleNomUsers")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VisibleUserCatalog", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("VisibleCatalogUsers")
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
