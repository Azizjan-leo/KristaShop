// <auto-generated />
using System;
using KristaShop.DataAccess.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KristaShop.DataAccess.Migrations
{
    [DbContext(typeof(KristaShopDbContext))]
    [Migration("20201007101306_AddNomenclatureDiscountsCatalogEntity")]
    partial class AddNomenclatureDiscountsCatalogEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("KristaShop.DataAccess.Entities.AuthorizationLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("random_code")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnName("login_date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RecordTimeStamp")
                        .HasColumnName("record_time_stamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type")
                        .HasColumnType("INT(11)")
                        .HasDefaultValueSql("0");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnName("valid_to")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("authorization_link");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.BannerItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("caption")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("image_path")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("title_color")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("id");

                    b.ToTable("banner_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.BlogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnName("image_path")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsVisible")
                        .HasColumnName("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnName("link")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LinkText")
                        .IsRequired()
                        .HasColumnName("link_text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("blog_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CartItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("discount")
                        .HasColumnType("double");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<int>("order_form_type")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.Property<Guid>("product_id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("total_amount")
                        .HasColumnType("double");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("cart_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Catalog", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("additional_description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset?>("close_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("is_disable_discount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_open")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_set")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("meta_description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_keywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<int>("order_form")
                        .HasColumnType("int");

                    b.Property<string>("preview_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("uri")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("video_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("id");

                    b.ToTable("dict_catalogs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CatalogDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("CatalogId")
                        .HasColumnName("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("DiscountPrice")
                        .HasColumnName("discount_price")
                        .HasColumnType("double");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("catalog_discounts");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Category", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("image_path")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("dict_category");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("ColorCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("faq");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("FaqId")
                        .HasColumnName("faq_id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("FaqId");

                    b.ToTable("faq_section");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(5000);

                    b.Property<Guid>("FaqSectionId")
                        .HasColumnName("faq_section_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("FaqSectionId");

                    b.ToTable("faq_section_content");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("FaqSectionContentId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FaqSectionContentId");

                    b.ToTable("FaqSectionContentFile");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("Person")
                        .IsRequired()
                        .HasColumnName("person")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime>("RecordTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("record_time_stamp")
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<Guid>("ReviewerUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("binary(16)")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("INT(11)");

                    b.Property<DateTime?>("ViewTimeStamp")
                        .HasColumnName("view_time_stamp")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Viewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("viewed")
                        .HasColumnType("TINYINT(1)")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("feedback_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FeedbackFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_date")
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnName("filename")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<Guid>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("VirtualPath")
                        .IsRequired()
                        .HasColumnName("virtual_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("feedback_files");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.GalleryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnName("image_path")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("IsVisible")
                        .HasColumnName("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnName("link")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LinkText")
                        .IsRequired()
                        .HasColumnName("link_text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("gallery_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.MenuContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsOpen")
                        .HasColumnName("is_authorize")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSinglePage")
                        .HasColumnName("is_single_page")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisibleInMenu")
                        .HasColumnName("is_visible_in_menu")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasColumnName("layout")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("MetaDescription")
                        .HasColumnName("meta_description")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("MetaKeywords")
                        .HasColumnName("meta_keywords")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("MetaTitle")
                        .HasColumnName("meta_title")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("TitleIconPath")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("title_icon_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256)
                        .HasDefaultValue("");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("menu_contents");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("action_name")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("controller_name")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("icon")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("menu_type")
                        .HasColumnType("int");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<string>("parameters")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("url")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("id");

                    b.ToTable("menu_items");

                    b.HasData(
                        new
                        {
                            id = new Guid("9b6bedbe-6fce-4a6a-919e-511a6c299e6c"),
                            action_name = "Index",
                            controller_name = "Admin/Home",
                            icon = "fa-home",
                            menu_type = 999,
                            order = 1,
                            title = "Главная"
                        },
                        new
                        {
                            id = new Guid("dcdf01a1-78ac-4065-af38-61e2d0d226f8"),
                            action_name = "Index",
                            controller_name = "Admin/Menu",
                            icon = "fa-bars",
                            menu_type = 999,
                            order = 2,
                            title = "Пункты меню"
                        },
                        new
                        {
                            id = new Guid("cc40cee9-2a35-4c9c-b629-7ef180166119"),
                            action_name = "Index",
                            controller_name = "Admin/MBody",
                            icon = "fa-file-code",
                            menu_type = 999,
                            order = 3,
                            title = "Контент страниц"
                        },
                        new
                        {
                            id = new Guid("0b029a4c-a06d-4109-8da8-bc1375c0357f"),
                            action_name = "Index",
                            controller_name = "Admin/Catalog",
                            icon = "fa-th",
                            menu_type = 999,
                            order = 4,
                            title = "Каталоги"
                        },
                        new
                        {
                            id = new Guid("5c3c902b-6461-4f82-a4dd-85e062180a97"),
                            action_name = "Index",
                            controller_name = "Admin/Category",
                            icon = "fa-tags",
                            menu_type = 999,
                            order = 5,
                            title = "Категории"
                        },
                        new
                        {
                            id = new Guid("b48f0234-cfed-4c22-b820-f7790382b19c"),
                            action_name = "Index",
                            controller_name = "Admin/CModel",
                            icon = "fa-eye",
                            menu_type = 999,
                            order = 6,
                            title = "Модели"
                        },
                        new
                        {
                            id = new Guid("eaf89685-c81c-45a2-aaa3-0edd9d3b9769"),
                            action_name = "Index",
                            controller_name = "Admin/Discount",
                            icon = "fa-percent",
                            menu_type = 999,
                            order = 7,
                            title = "Скидки"
                        },
                        new
                        {
                            id = new Guid("67ff1ca0-fbdd-44c8-8c88-4ba1e09b739c"),
                            action_name = "Index",
                            controller_name = "Admin/Blog",
                            icon = "fa-blog",
                            menu_type = 999,
                            order = 8,
                            title = "Блог"
                        },
                        new
                        {
                            id = new Guid("c5c26b3a-9bf8-42d4-9f3b-95f848cf428e"),
                            action_name = "Index",
                            controller_name = "Admin/Gallery",
                            icon = "fa-images",
                            menu_type = 999,
                            order = 9,
                            title = "Галерея"
                        },
                        new
                        {
                            id = new Guid("5e1ca256-4fda-4347-809d-03ee27f1cca9"),
                            action_name = "Index",
                            controller_name = "Admin/Feedback",
                            icon = "fa-mail-bulk",
                            menu_type = 999,
                            order = 10,
                            title = "Сообщения"
                        },
                        new
                        {
                            id = new Guid("2fa767b8-cdf3-47e1-a536-ea5b59ff6cd8"),
                            action_name = "Index",
                            controller_name = "Admin/Banner",
                            icon = "fa-bullhorn",
                            menu_type = 999,
                            order = 12,
                            title = "Баннер"
                        },
                        new
                        {
                            id = new Guid("1784ba0c-c201-4a9c-8afe-526b78101242"),
                            action_name = "Index",
                            controller_name = "Admin/VideoGallery",
                            icon = "fa-film",
                            menu_type = 999,
                            order = 13,
                            title = "Видеогалерея"
                        },
                        new
                        {
                            id = new Guid("fada87c8-3065-4420-b318-2fb5cc942ef6"),
                            action_name = "Index",
                            controller_name = "Admin/UrlAcl",
                            icon = "fa-link",
                            menu_type = 999,
                            order = 100,
                            title = "Доступ по URL"
                        },
                        new
                        {
                            id = new Guid("e094bf47-e8b5-4732-84ec-5970437f48c5"),
                            action_name = "Index",
                            controller_name = "Admin/Settings",
                            icon = "fa-cog",
                            menu_type = 999,
                            order = 120,
                            title = "Настройки"
                        },
                        new
                        {
                            id = new Guid("1d56e74b-9c90-4000-b673-66a6fb90fb9a"),
                            action_name = "Index",
                            controller_name = "Admin/Faq",
                            icon = "fa-info",
                            menu_type = 999,
                            order = 140,
                            title = "Воронка"
                        });
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCatalog", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_catalog");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCategory", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("category_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_category");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("DiscountPrice")
                        .HasColumnName("discount_price")
                        .HasColumnType("double");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("NomenclatureId")
                        .HasColumnName("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("NomenclatureId");

                    b.ToTable("nom_discounts");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomDiscountCatalog", b =>
                {
                    b.Property<Guid>("DiscountId")
                        .HasColumnName("nom_discount_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("CatalogId")
                        .HasColumnName("catalog_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("DiscountId", "CatalogId");

                    b.HasIndex("CatalogId");

                    b.ToTable("nom_discounts_catalogs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomPhoto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid?>("color_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("old_photo_path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<string>("photo_path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_photos");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomPreorder", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("counter")
                        .HasColumnType("int");

                    b.Property<int>("max_amout")
                        .HasColumnType("int");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_preorder");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomProdPrice", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.Property<Guid>("product_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_prod_price");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomUserFavorite", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.HasIndex("nom_id");

                    b.ToTable("nom_user_favorites");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomenclatureModel", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("articul")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("default_price")
                        .HasColumnType("double");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("image_alternative_text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("image_path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("is_set")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("link_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_keywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("meta_title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("parts_count")
                        .HasColumnType("double");

                    b.Property<string>("youtube_link")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("nomenclatures");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NotVisibleProdCtgr", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("category_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("product_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.HasIndex("nom_id");

                    b.ToTable("not_visible_prod_ctgrs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NotVisibleProdCtlg", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("product_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.HasIndex("nom_id");

                    b.ToTable("not_visible_prod_ctlgs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Settings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<bool>("OnlyRootAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("only_root_access")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("dict_settings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afd36311-a384-4105-946d-e2d388ab072c"),
                            Description = "Ссылка на оптовый аккаунт инстаграм",
                            Key = "KristaInstagram",
                            OnlyRootAccess = false,
                            Value = "https://www.instagram.com/krista.fashion/"
                        },
                        new
                        {
                            Id = new Guid("7f1c2461-2d69-4af4-9f77-15991cc420bd"),
                            Description = "Ссылка на оптовый аккаунт фэйсбук",
                            Key = "KristaFacebook",
                            OnlyRootAccess = false,
                            Value = "https://www.facebook.com/kristafashion-101281188115170/"
                        },
                        new
                        {
                            Id = new Guid("e509c422-9e1c-4372-bfc6-a0641ab65a55"),
                            Description = "Ссылка на оптовый аккаунт ютуб",
                            Key = "KristaYoutube",
                            OnlyRootAccess = false,
                            Value = "https://www.youtube.com/channel/UCXftbG5dwIDgWGR_WKOj5CQ"
                        },
                        new
                        {
                            Id = new Guid("6a2467aa-13de-45bf-9772-8d1a53f76541"),
                            Description = "Ссылка на подписку на оптовый аккаунт ютуб",
                            Key = "KristaYoutubeSubscribe",
                            OnlyRootAccess = false,
                            Value = "https://www.youtube.com/channel/UCXftbG5dwIDgWGR_WKOj5CQ?sub_confirmation=1"
                        },
                        new
                        {
                            Id = new Guid("f7c7016c-2a60-4e51-b6c5-9db7e61e1aa0"),
                            Description = "Ссылка на оптовый аккаунт в контакте",
                            Key = "KristaVk",
                            OnlyRootAccess = false,
                            Value = "https://www.vk.com/"
                        },
                        new
                        {
                            Id = new Guid("d5f1181d-89e6-4e6a-900e-2d0b5017f4f4"),
                            Description = "Путь к политике конфиденциальности",
                            Key = "TermsOfUse",
                            OnlyRootAccess = false,
                            Value = "/Privacy/Index"
                        },
                        new
                        {
                            Id = new Guid("5e3da824-8a53-4028-af75-f270bec049d0"),
                            Description = "Путь данным о доставке",
                            Key = "DeliveryDetails",
                            OnlyRootAccess = false,
                            Value = "/Cooperation/Delivery"
                        },
                        new
                        {
                            Id = new Guid("adee4fd9-878d-45a6-aed7-2cff2df6b123"),
                            Description = "Путь к данным об оплате",
                            Key = "PaymentDetails",
                            OnlyRootAccess = false,
                            Value = "/Cooperation/Payment"
                        },
                        new
                        {
                            Id = new Guid("b1a20574-b8db-41d0-b007-d77efa9219ee"),
                            Description = "Путь к контактам в футере",
                            Key = "FooterContacts",
                            OnlyRootAccess = false,
                            Value = "/Footer/Contacts"
                        },
                        new
                        {
                            Id = new Guid("d7863668-5d04-490d-b357-4c4aba7eb6d5"),
                            Description = "Путь к описанию на странице категориий",
                            Key = "CategoriesDescription",
                            OnlyRootAccess = false,
                            Value = "/Category/Index"
                        },
                        new
                        {
                            Id = new Guid("f4538f14-00df-4616-a3f7-d3edcf622fb2"),
                            Description = "Путь к дополнительному описанию открытого каталога при поиске",
                            Key = "OpenCatalogSearchDescription",
                            OnlyRootAccess = false,
                            Value = "/Search/OpenCatalog"
                        },
                        new
                        {
                            Id = new Guid("dfc70e24-ad7d-4283-9ad1-e9580af64ada"),
                            Description = "Сообщение при успешном совершениии покупки",
                            Key = "CartSuccess",
                            OnlyRootAccess = false,
                            Value = "Спасибо за покупку"
                        });
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.UrlAccess", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("access_groups_json")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("acl")
                        .HasColumnType("int");

                    b.Property<string>("denied_groups_json")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("url_access");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.UserData", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userId")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("LastSignIn")
                        .HasColumnName("last_sign_in")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.ToTable("user_data");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.UserDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<double>("DiscountPrice")
                        .HasColumnName("discount_price")
                        .HasColumnType("double");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.ToTable("user_discounts");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsVisible")
                        .HasColumnName("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PreviewPath")
                        .IsRequired()
                        .HasColumnName("preview_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnName("video_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("gallery_video");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VideoGallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.Property<bool>("IsOpen")
                        .HasColumnName("is_open")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisible")
                        .HasColumnName("is_visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("PreviewPath")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("preview_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("''")
                        .HasMaxLength(256);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("VideoPath")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("video_path")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasDefaultValueSql("''")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("video_gallery");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VideoGalleryVideos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("GalleryId")
                        .HasColumnName("gallery_id")
                        .HasColumnType("binary(16)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("VideoId")
                        .HasColumnName("video_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.HasIndex("VideoId");

                    b.ToTable("video_gallery_videos");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VisibleNomUser", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("nom_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("nom_id");

                    b.ToTable("visible_nom_users");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VisibleUserCatalog", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("catalog_id")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("binary(16)");

                    b.HasKey("id");

                    b.HasIndex("catalog_id");

                    b.ToTable("visible_user_catalogs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CartItem", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CatalogDiscount", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("CatalogDiscounts")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSection", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Faq", "Faq")
                        .WithMany("FaqSections")
                        .HasForeignKey("FaqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContent", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.FaqSection", "FaqSection")
                        .WithMany("FaqSectionContents")
                        .HasForeignKey("FaqSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContentFile", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.FaqSectionContent", "FaqSectionContent")
                        .WithMany("FaqSectionContentFiles")
                        .HasForeignKey("FaqSectionContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FeedbackFile", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Feedback", "Feedback")
                        .WithMany("Files")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCatalog", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("NomCatalogs")
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomCatalogs")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCategory", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Category", "Category")
                        .WithMany("NomCategories")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomCategories")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomDiscount", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomDiscounts")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomDiscountCatalog", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("NomDiscounts")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomDiscount", "Discount")
                        .WithMany("DiscountCatalogs")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomPhoto", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomPhotos")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomPreorder", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomProdPrice", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomUserFavorite", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("NomUserFavorites")
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("NomUserFavorites")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NotVisibleProdCtgr", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NotVisibleProdCtlg", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VideoGalleryVideos", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.VideoGallery", "Gallery")
                        .WithMany("VideoGalleryVideos")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.Video", "Video")
                        .WithMany("VideoGalleryVideos")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VisibleNomUser", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.NomenclatureModel", "Nomenclature")
                        .WithMany("VisibleNomUsers")
                        .HasForeignKey("nom_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VisibleUserCatalog", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("VisibleCatalogUsers")
                        .HasForeignKey("catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
