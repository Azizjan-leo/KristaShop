// <auto-generated />
using System;
using KristaShop.DataAccess.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KristaShop.DataAccess.Migrations
{
    [DbContext(typeof(KristaShopDbContext))]
    [Migration("20210624093055_AddOrdersConsolidatedOrderMenuItem")]
    partial class AddOrdersConsolidatedOrderMenuItem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("KristaShop.Common.Models.LookUpItem<int, string>", b =>
                {
                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.ToTable("LookUpItem<int, string>", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.AppliedImport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("ApplyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("apply_date");

                    b.Property<string>("BackupFile")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("backup_file_path");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("key");

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("key_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("applied_imports");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.AuthorizationLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("random_code");

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("login_date");

                    b.Property<DateTime>("RecordTimeStamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("record_time_stamp");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT(11)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("0");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.ToTable("authorization_link");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.BannerItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("caption");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("link");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<string>("TitleColor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("title_color");

                    b.HasKey("Id");

                    b.ToTable("banner_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.BlogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("link");

                    b.Property<string>("LinkText")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("link_text");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("blog_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Cart1CItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("int(6)")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("articul");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int(8)")
                        .HasColumnName("catalog_id");

                    b.Property<int>("ColorId")
                        .HasColumnType("int(8)")
                        .HasColumnName("color_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("ModelId")
                        .HasColumnType("int(8)")
                        .HasColumnName("model_id");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("int(8)")
                        .HasColumnName("nomenclature_id");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_rub");

                    b.Property<string>("SizeValue")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int(8)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("cart_items_1c");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Catalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalDescription")
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)")
                        .HasColumnName("additional_description");

                    b.Property<int>("CatalogId1C")
                        .HasColumnType("int")
                        .HasColumnName("catalog_id_1c");

                    b.Property<DateTimeOffset?>("CloseTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("close_time");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDiscountDisabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_disable_discount");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_open");

                    b.Property<bool>("IsSet")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_set");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<int>("OrderForm")
                        .HasColumnType("int")
                        .HasColumnName("order_form");

                    b.Property<string>("PreviewPath")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("preview_path");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("uri");

                    b.Property<string>("VideoPath")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("video_path");

                    b.HasKey("Id");

                    b.ToTable("dict_catalogs");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CatalogDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<Guid>("CatalogId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("catalog_id");

                    b.Property<double>("DiscountPrice")
                        .HasColumnType("double")
                        .HasColumnName("discount_price");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("catalog_discounts");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CatalogItemDescriptor", b =>
                {
                    b.Property<string>("Articul")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("articul");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime")
                        .HasColumnName("add_date");

                    b.Property<string>("AltText")
                        .HasColumnType("text")
                        .HasColumnName("alt_text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsLimited")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_limited");

                    b.Property<bool?>("IsVisible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_visible");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("main_photo");

                    b.Property<string>("Matherial")
                        .HasColumnType("text")
                        .HasColumnName("matherial");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("text")
                        .HasColumnName("meta_title");

                    b.Property<string>("VideoLink")
                        .HasColumnType("text")
                        .HasColumnName("video_link");

                    b.HasKey("Articul");

                    b.ToTable("catalog_item_descriptor");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CatalogItemVisibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("articul");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("catalog_id");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<string>("SizeValue")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("size_value");

                    b.HasKey("Id");

                    b.ToTable("catalog_item_visibility");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId1C")
                        .HasColumnType("int")
                        .HasColumnName("category_id_1c");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("description");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.HasKey("Id");

                    b.ToTable("dict_category");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.ClientOrdersTotalsSqlView", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<int>("InStockTotalAmount")
                        .HasColumnType("int")
                        .HasColumnName("instock_amount");

                    b.Property<double>("InStockTotalSum")
                        .HasColumnType("double")
                        .HasColumnName("instock_total_sum");

                    b.Property<double>("InStockTotalSumInRub")
                        .HasColumnType("double")
                        .HasColumnName("instock_total_sum_rub");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("ManagerName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<int>("PreorderTotalAmount")
                        .HasColumnType("int")
                        .HasColumnName("preorder_amount");

                    b.Property<double>("PreorderTotalSum")
                        .HasColumnType("double")
                        .HasColumnName("preorder_total_sum");

                    b.Property<double>("PreorderTotalSumInRub")
                        .HasColumnType("double")
                        .HasColumnName("preorder_total_sum_rub");

                    b.Property<string>("UserFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_fullname");

                    b.Property<bool>("UserHasCartItems")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_cart_items");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("ClientOrdersTotalsSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.ManagerAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("AccessTo")
                        .HasColumnType("int")
                        .HasColumnName("access_to");

                    b.Property<int>("AccessToManagerId")
                        .HasColumnType("int")
                        .HasColumnName("access_to_manager_id");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("ext1c_managers_accesses");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.ManagerDetails", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("NotificationsEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("notifications_email");

                    b.Property<int>("RegistrationsQueueNumber")
                        .HasColumnType("int")
                        .HasColumnName("registration_queue_number");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("role_id");

                    b.Property<bool>("SendNewOrderNotification")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("send_new_order_notification");

                    b.Property<bool>("SendNewRegistrationsNotification")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("send_new_registrations_notification");

                    b.HasKey("ManagerId");

                    b.HasIndex("RoleId");

                    b.ToTable("ext1c_managers_details");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.ManagerDetailsSqlView", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("NotificationsEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("notifications_email");

                    b.Property<int>("RegistrationsQueueNumber")
                        .HasColumnType("int")
                        .HasColumnName("registration_queue_number");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("role_id");

                    b.Property<bool>("SendNewOrderNotification")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("send_new_order_notification");

                    b.Property<bool>("SendNewRegistrationsNotification")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("send_new_registrations_notification");

                    b.ToTable("ManagerDetailsSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.NewUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("CompanyAddress");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fullname");

                    b.Property<string>("Login")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("Login");

                    b.Property<string>("MallAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("mall_address");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("NewCity")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("new_city");

                    b.Property<string>("Password")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("Password");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("for1c_new_users");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.NewUserSqlView", b =>
                {
                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_date");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<Guid>("Id")
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Login")
                        .HasColumnType("longtext");

                    b.Property<string>("MallAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("mall_address");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("ManagerName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<string>("NewCity")
                        .HasColumnType("longtext")
                        .HasColumnName("new_city");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("NewUserSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasDefaultValue("")
                        .HasColumnName("description");

                    b.Property<bool>("HasExtraPack")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_extra_pack");

                    b.Property<bool>("IsProcessedPreorder")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_processed_preorder");

                    b.Property<bool>("IsProcessedRetail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_processed_retail");

                    b.Property<bool>("IsReviewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_reviewed");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_login");

                    b.HasKey("Id");

                    b.ToTable("for1c_orders");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.OrderAdmin", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_date");

                    b.Property<bool>("HasExtraPack")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_extra_pack");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("IsProcessedPreorder")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_processed_preorder");

                    b.Property<bool>("IsProcessedRetail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_processed_retail");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_reviewed");

                    b.Property<string>("ManagerFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<int>("PreorderAmount")
                        .HasColumnType("int")
                        .HasColumnName("preorder_amount");

                    b.Property<double>("PreorderTotalSum")
                        .HasColumnType("double")
                        .HasColumnName("preorder_total_sum");

                    b.Property<double>("PreorderTotalSumInRub")
                        .HasColumnType("double")
                        .HasColumnName("preorder_total_sum_rub");

                    b.Property<int>("RetailAmount")
                        .HasColumnType("int")
                        .HasColumnName("retail_amount");

                    b.Property<double>("RetailTotalSum")
                        .HasColumnType("double")
                        .HasColumnName("retail_total_sum");

                    b.Property<double>("RetailTotalSumInRub")
                        .HasColumnType("double")
                        .HasColumnName("retail_total_sum_rub");

                    b.Property<string>("UserComments")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("UserFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("client_name");

                    b.Property<bool>("UserHasCartItems")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_cart_items");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("OrderAdmin", t => t.ExcludeFromMigrations());

                    b.ToView("for1c_orders_admin");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("catalog_id");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("int")
                        .HasColumnName("nomenclature_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_in_rub");

                    b.Property<string>("SizeValue")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("size_value");

                    b.Property<int>("StorehouseId")
                        .HasColumnType("int")
                        .HasColumnName("storehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("for1c_order_details");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.OrderStats", b =>
                {
                    b.Property<int>("OrdersCount")
                        .HasColumnType("int")
                        .HasColumnName("orders_count");

                    b.Property<int>("TotAmountPreorder")
                        .HasColumnType("int")
                        .HasColumnName("tot_amount_preorder");

                    b.Property<int>("TotAmountRetail")
                        .HasColumnType("int")
                        .HasColumnName("tot_amount_retail");

                    b.Property<double>("TotSumPreorder")
                        .HasColumnType("double")
                        .HasColumnName("tot_sum_preorder");

                    b.Property<double>("TotSumRetail")
                        .HasColumnType("double")
                        .HasColumnName("tot_sum_retail");

                    b.ToTable("OrderStats", t => t.ExcludeFromMigrations());

                    b.ToView("for1c_orders_admin_stats");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.UserNewPassword", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordSrc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_src");

                    b.HasKey("UserId");

                    b.ToTable("for1c_user_new_passwords");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.BarcodeShipmentsSqlView", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<string>("Barcodes")
                        .HasColumnType("longtext")
                        .HasColumnName("barcodes");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("PartsCount")
                        .HasColumnType("int")
                        .HasColumnName("parts_count");

                    b.Property<string>("PhotoByColor")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_by_color");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("cena");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("cena_rub");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sale_date");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("BarcodeShipmentsSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.BarcodeSqlView", b =>
                {
                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<string>("Barcode")
                        .HasColumnType("longtext")
                        .HasColumnName("barcode");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("razmer");

                    b.ToTable("BarcodeSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.CartItemSqlView", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("catalog_id");

                    b.Property<string>("CatalogName")
                        .HasColumnType("longtext")
                        .HasColumnName("catalog_name");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("ManagerName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("int")
                        .HasColumnName("nomenclature_id");

                    b.Property<int>("PartsCount")
                        .HasColumnType("int")
                        .HasColumnName("parts_count");

                    b.Property<string>("PhotoByColor")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_by_color");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_rub");

                    b.Property<string>("SizeValue")
                        .HasColumnType("longtext")
                        .HasColumnName("size_value");

                    b.Property<string>("UserFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_fullname");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("CartItemSqlView", t => t.ExcludeFromMigrations());

                    b.ToView("1c_cart_item");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.CatalogItem1CAmount", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("kolichestvo");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("razdel");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("int")
                        .HasColumnName("nomenklatura");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_rub");

                    b.Property<string>("SizeValue")
                        .HasColumnType("longtext")
                        .HasColumnName("razmer");

                    b.ToTable("CatalogItem1CAmount", t => t.ExcludeFromMigrations());

                    b.ToView("1c_catalog");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.CatalogItemBrief", b =>
                {
                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("add_date");

                    b.Property<string>("AltText")
                        .HasColumnType("longtext")
                        .HasColumnName("alt_text");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("razdel_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsLimited")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_limited");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("int")
                        .HasColumnName("tot_items_count");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_rub");

                    b.ToTable("CatalogItemBrief", t => t.ExcludeFromMigrations());

                    b.ToView("1c_catalog_item_brief");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.CatalogItemForAdd", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("razdel");

                    b.Property<string>("CatalogName")
                        .HasColumnType("longtext")
                        .HasColumnName("catalog_name");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("int")
                        .HasColumnName("nomenklatura");

                    b.Property<int>("PartsCount")
                        .HasColumnType("int")
                        .HasColumnName("parts_count");

                    b.Property<string>("PhotoByColor")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_by_color");

                    b.Property<string>("Size")
                        .HasColumnType("longtext")
                        .HasColumnName("razmer");

                    b.Property<string>("SizeLine")
                        .HasColumnType("longtext")
                        .HasColumnName("line");

                    b.ToTable("CatalogItemForAdd", t => t.ExcludeFromMigrations());

                    b.ToView("1c_catalog_item_for_add");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.CatalogItemFull", b =>
                {
                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("razdel_id");

                    b.Property<int>("ColorGroupId")
                        .HasColumnType("int")
                        .HasColumnName("color_group_id");

                    b.Property<string>("ColorGroupName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_name");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<int>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("IsVisibleColor")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible_color");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("int")
                        .HasColumnName("kolichestvo");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.Property<string>("MaterialName")
                        .HasColumnType("longtext")
                        .HasColumnName("material_name");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelName")
                        .HasColumnType("longtext")
                        .HasColumnName("model_name");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("int")
                        .HasColumnName("nomenclature_id");

                    b.Property<int>("PartsCount")
                        .HasColumnType("int")
                        .HasColumnName("razmerov");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_rub");

                    b.Property<string>("Size")
                        .HasColumnType("longtext")
                        .HasColumnName("size");

                    b.Property<string>("SizeLine")
                        .HasColumnType("longtext")
                        .HasColumnName("size_line");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<double>("Weight")
                        .HasColumnType("double")
                        .HasColumnName("weight");

                    b.ToTable("CatalogItemFull", t => t.ExcludeFromMigrations());

                    b.ToView("1c_catalog_item_full");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.Category1C", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("category_name");

                    b.ToTable("Category", t => t.ExcludeFromMigrations());

                    b.ToView("1c_categories");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("1c_city", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ClientInProductionItemSqlView", b =>
                {
                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("InStageKroy")
                        .HasColumnType("int")
                        .HasColumnName("kroitsya");

                    b.Property<int>("InStageKroyDone")
                        .HasColumnType("int")
                        .HasColumnName("gotovkroy");

                    b.Property<int>("InStageSkladGP")
                        .HasColumnType("int")
                        .HasColumnName("skladgp");

                    b.Property<int>("InStageVposhive")
                        .HasColumnType("int")
                        .HasColumnName("vposhive");

                    b.Property<int>("InStageZapusk")
                        .HasColumnType("int")
                        .HasColumnName("zapusk");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<int>("PartsCount")
                        .HasColumnType("int")
                        .HasColumnName("parts_count");

                    b.Property<string>("PhotoByColor")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_by_color");

                    b.Property<string>("SizeValue")
                        .HasColumnType("longtext")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("ClientInProductionItemSqlView", t => t.ExcludeFromMigrations());

                    b.ToView("1c_client_in_production_item");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ClientManufacturingItemSqlView", b =>
                {
                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    b.Property<string>("CollectionName")
                        .HasColumnType("longtext")
                        .HasColumnName("collection_name");

                    b.Property<int>("CollectionPrepayPercent")
                        .HasColumnType("int")
                        .HasColumnName("collection_percent");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("InKroyAmount")
                        .HasColumnType("int")
                        .HasColumnName("kroitsya");

                    b.Property<int>("InKroyGotovAmount")
                        .HasColumnType("int")
                        .HasColumnName("gotovkroy");

                    b.Property<int>("InSkladGPAmount")
                        .HasColumnType("int")
                        .HasColumnName("skladgp");

                    b.Property<int>("InVPoshiveAmount")
                        .HasColumnType("int")
                        .HasColumnName("vposhive");

                    b.Property<int>("InZapuskAmount")
                        .HasColumnType("int")
                        .HasColumnName("zapusk");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<string>("PhotoByColor")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_by_color");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("cena");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("cena_rub");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("ClientManufactoringSqlView", t => t.ExcludeFromMigrations());

                    b.ToView("1c_client_manufactoring_item");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ClientRequestItemSqlView", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    b.Property<string>("CollectionName")
                        .HasColumnType("longtext")
                        .HasColumnName("collection_name");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<string>("PhotoByColor")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_by_color");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("cena");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("cena_rub");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("request_date");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("ClientRequestItemSqlView", t => t.ExcludeFromMigrations());

                    b.ToView("1c_client_request_item");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ClientReservationItemSqlView", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    b.Property<string>("CollectionName")
                        .HasColumnType("longtext")
                        .HasColumnName("collection_name");

                    b.Property<int>("CollectionPrepayPercent")
                        .HasColumnType("int")
                        .HasColumnName("collection_percent");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<string>("PhotoByColor")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_by_color");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("cena");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("cena_rub");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reservation_date");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<double>("Weight")
                        .HasColumnType("double")
                        .HasColumnName("ves");

                    b.ToTable("ClientReservationItemSqlView", t => t.ExcludeFromMigrations());

                    b.ToView("1c_client_reservation_item");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dates");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("datev");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("PercentValue")
                        .HasColumnType("int")
                        .HasColumnName("procent");

                    b.HasKey("Id");

                    b.ToTable("1c_collection", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("1c_colors", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ColorGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Hex")
                        .HasColumnType("longtext")
                        .HasColumnName("rgb");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("1c_colors_group", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.InvoiceLineSql", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("kolichestvo");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<string>("ColorGroup")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_name");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("osnovanie");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("id_dok");

                    b.Property<bool>("IsProductLine")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("flstr");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model");

                    b.Property<int>("PartsCount")
                        .HasColumnType("int")
                        .HasColumnName("parts_count");

                    b.Property<string>("PhotoByColor")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_by_color");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("cena");

                    b.Property<string>("Size")
                        .HasColumnType("longtext")
                        .HasColumnName("razmer");

                    b.Property<string>("SizeLine")
                        .HasColumnType("longtext")
                        .HasColumnName("size_line");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("klient");

                    b.ToTable("InvoiceLineSql", t => t.ExcludeFromMigrations());

                    b.ToView("1c_invoice_line");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.InvoiceSql", b =>
                {
                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("datadok");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext")
                        .HasColumnName("val");

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("double")
                        .HasColumnName("kurs_rub");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("InvoiceClientTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("pklient");

                    b.Property<string>("InvoiceNum")
                        .HasColumnType("longtext")
                        .HasColumnName("nomerdok");

                    b.Property<int>("IsPrepay")
                        .HasColumnType("int")
                        .HasColumnName("is_prepay");

                    b.Property<string>("ManagerFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<double>("PrePay")
                        .HasColumnType("double")
                        .HasColumnName("ispavans");

                    b.Property<double>("TotPay")
                        .HasColumnType("double")
                        .HasColumnName("koplate");

                    b.Property<string>("UserFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("klient");

                    b.Property<bool>("WasPayed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("oplachen");

                    b.ToTable("InvoiceSql", t => t.ExcludeFromMigrations());

                    b.ToView("1c_invoice");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ManufactureAdmin", b =>
                {
                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<string>("ManagerFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<int>("TotAmount")
                        .HasColumnType("int")
                        .HasColumnName("tot_amount");

                    b.Property<double>("TotPrice")
                        .HasColumnType("double")
                        .HasColumnName("tot_price");

                    b.Property<double>("TotPriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("tot_price_rub");

                    b.Property<string>("UserFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("ManufactureAdmin", t => t.ExcludeFromMigrations());

                    b.ToView("manufacture_admin");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("articul");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collection");

                    b.Property<int>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("skidka");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("Parts")
                        .HasColumnType("int")
                        .HasColumnName("razmerov");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<string>("SizeLine")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("line");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<float>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("Articul");

                    b.HasIndex("CollectionId");

                    b.ToTable("1c_models", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ModelParamsSqlView", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ModelName")
                        .HasColumnType("longtext")
                        .HasColumnName("model_name");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("int")
                        .HasColumnName("nomenclature_id");

                    b.Property<string>("Size")
                        .HasColumnType("longtext")
                        .HasColumnName("size");

                    b.Property<string>("SizeLine")
                        .HasColumnType("longtext")
                        .HasColumnName("size_line");

                    b.ToTable("ModelParams", t => t.ExcludeFromMigrations());

                    b.ToView("1c_models_params");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ModelPhotoSqlView", b =>
                {
                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("OldPhotoPath")
                        .HasColumnType("longtext")
                        .HasColumnName("old_photo_path");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_path");

                    b.ToTable("ModelPhotoSqlView", t => t.ExcludeFromMigrations());

                    b.ToView("model_photos_sql_view");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ModelToCatalog1CMap", b =>
                {
                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("razdel_id");

                    b.ToTable("ModelToCatalogMap", t => t.ExcludeFromMigrations());

                    b.ToView("1c_model_to_catalog");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ModelToCategory1CMap", b =>
                {
                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext")
                        .HasColumnName("category_name");

                    b.ToTable("ModelToCategotyMap", t => t.ExcludeFromMigrations());

                    b.ToView("1c_model_to_category");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ModelsInCatalogCounter", b =>
                {
                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("catalog_id");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("models_count");

                    b.ToTable("ModelsInCatalogCounter", t => t.ExcludeFromMigrations());

                    b.ToView("1c_models_in_catalog_counter");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.MoneyDocumentItemSqlView", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("id_doc");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model");

                    b.Property<string>("PhotoByColor")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_by_color");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_rub");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("klient");

                    b.ToTable("MoneyDocumentItemSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.MoneyDocumentSqlView", b =>
                {
                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_doc");

                    b.Property<double>("FinalBalance")
                        .HasColumnType("double")
                        .HasColumnName("kon_ost");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<double>("Income")
                        .HasColumnType("double")
                        .HasColumnName("dolg_minus");

                    b.Property<double>("InitialBalance")
                        .HasColumnType("double")
                        .HasColumnName("nach_ost");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name_doc");

                    b.Property<string>("Number")
                        .HasColumnType("longtext")
                        .HasColumnName("nomer_doc");

                    b.Property<double>("ToPay")
                        .HasColumnType("double")
                        .HasColumnName("dolg_plus");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("klient");

                    b.ToTable("MoneyDocumentSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.MoneyDocumentsTotalSqlView", b =>
                {
                    b.Property<double>("FinalBalance")
                        .HasColumnType("double")
                        .HasColumnName("kon_ost");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("kon_data");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<double>("Income")
                        .HasColumnType("double")
                        .HasColumnName("dolg_minus");

                    b.Property<double>("InitialBalance")
                        .HasColumnType("double")
                        .HasColumnName("nach_ost");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("nach_data");

                    b.Property<double>("ToPay")
                        .HasColumnType("double")
                        .HasColumnName("dolg_plus");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("klient");

                    b.ToTable("MoneyDocumentsTotalSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.OrderDetailsFull", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("catalog_id");

                    b.Property<string>("CatalogName")
                        .HasColumnType("longtext")
                        .HasColumnName("catalog_name");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    b.Property<string>("CollectionName")
                        .HasColumnType("longtext")
                        .HasColumnName("collection_name");

                    b.Property<int>("CollectionPrepayPercent")
                        .HasColumnType("int")
                        .HasColumnName("collection_percent");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("int")
                        .HasColumnName("nomenclature_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<string>("PhotoByColor")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_by_color");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_in_rub");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("size_value");

                    b.HasKey("Id");

                    b.ToTable("OrderDetailsFull", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.OrderHistorySqlView", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    b.Property<string>("CollectionName")
                        .HasColumnType("longtext")
                        .HasColumnName("collection_name");

                    b.Property<int>("CollectionPrepayPercent")
                        .HasColumnType("int")
                        .HasColumnName("collection_percent");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("order_date");

                    b.Property<string>("PhotoByColor")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_by_color");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("OrderHistorySqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.RequestAdmin", b =>
                {
                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<string>("ManagerFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("request_date");

                    b.Property<int>("TotAmount")
                        .HasColumnType("int")
                        .HasColumnName("tot_amount");

                    b.Property<double>("TotPrice")
                        .HasColumnType("double")
                        .HasColumnName("tot_price");

                    b.Property<double>("TotPriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("tot_price_rub");

                    b.Property<string>("UserFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("RequestAdmin", t => t.ExcludeFromMigrations());

                    b.ToView("requests_admin");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ReservationAdmin", b =>
                {
                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<DateTime>("FirstItemDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("first_item_date");

                    b.Property<string>("ManagerFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<int>("TotAmount")
                        .HasColumnType("int")
                        .HasColumnName("tot_amount");

                    b.Property<double>("TotPrice")
                        .HasColumnType("double")
                        .HasColumnName("tot_price");

                    b.Property<double>("TotPriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("tot_price_rub");

                    b.Property<string>("UserFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("ReservationAdmin", t => t.ExcludeFromMigrations());

                    b.ToView("reservations_admin");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ShipingAdmin", b =>
                {
                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<string>("ManagerFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<int>("TotAmount")
                        .HasColumnType("int")
                        .HasColumnName("tot_amount");

                    b.Property<double>("TotPrice")
                        .HasColumnType("double")
                        .HasColumnName("tot_price");

                    b.Property<double>("TotPriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("tot_price_rub");

                    b.Property<string>("UserFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("ShipingAdmin", t => t.ExcludeFromMigrations());

                    b.ToView("shiping_admin");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.ShipmentsSqlView", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    b.Property<string>("CollectionName")
                        .HasColumnType("longtext")
                        .HasColumnName("collection_name");

                    b.Property<int>("CollectionPrepayPercent")
                        .HasColumnType("int")
                        .HasColumnName("collection_percent");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("ColorPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorValue")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_rgb_value");

                    b.Property<string>("DocumentsFolder")
                        .HasColumnType("longtext")
                        .HasColumnName("schet");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<int>("PartsCount")
                        .HasColumnType("int")
                        .HasColumnName("parts_count");

                    b.Property<string>("PhotoByColor")
                        .HasColumnType("longtext")
                        .HasColumnName("photo_by_color");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("cena");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("cena_rub");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sale_date");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("ShipmentsSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.Storehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("IsCollective")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("obsch");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("mesto");

                    b.HasKey("Id");

                    b.ToTable("Storehouse", t => t.ExcludeFromMigrations());

                    b.ToView("1c_sklady");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.StorehouseRests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("kolichestvo");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color");

                    b.Property<bool>("IsLine")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("line");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model");

                    b.Property<int>("NomenclatureId")
                        .HasColumnType("int")
                        .HasColumnName("nomenklatura");

                    b.Property<int>("StorehouseId")
                        .HasColumnType("int")
                        .HasColumnName("sklad");

                    b.Property<bool>("StorehouseIsCollective")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("obsch");

                    b.Property<string>("StorehouseName")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("StorehousePriority")
                        .HasColumnType("int")
                        .HasColumnName("mesto");

                    b.HasKey("Id");

                    b.ToTable("1c_sklad", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.UserSqlView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<double>("Balance")
                        .HasColumnType("double")
                        .HasColumnName("avansdolg");

                    b.Property<double>("BalanceInRub")
                        .HasColumnType("double")
                        .HasColumnName("avansdolgrub");

                    b.Property<string>("CatalogsAccess")
                        .HasColumnType("longtext")
                        .HasColumnName("catalogs_access");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city");

                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<string>("CreateDate")
                        .HasColumnType("longtext")
                        .HasColumnName("cdate");

                    b.Property<string>("Date")
                        .HasColumnType("longtext")
                        .HasColumnName("date");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsManager")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("imanager");

                    b.Property<bool>("IsPartner")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_partner");

                    b.Property<DateTimeOffset>("LastSignIn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_sign_in");

                    b.Property<string>("Login")
                        .HasColumnType("longtext")
                        .HasColumnName("login");

                    b.Property<string>("MallAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("addresstc");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager");

                    b.Property<string>("ManagerName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password_md5");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("User", t => t.ExcludeFromMigrations());

                    b.ToView("1c_clients");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("ColorCode");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("faq");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<Guid>("FaqId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("faq_id");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("IconUrl");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("FaqId");

                    b.ToTable("faq_section");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5120)
                        .HasColumnType("varchar(5120)")
                        .HasColumnName("content");

                    b.Property<Guid>("FaqSectionId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("faq_section_id");

                    b.HasKey("Id");

                    b.HasIndex("FaqSectionId");

                    b.ToTable("faq_section_content");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("FaqSectionContentId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FaqSectionContentId");

                    b.ToTable("FaqSectionContentFile");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Favorite1CItemItem", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int(8)")
                        .HasColumnName("user_id");

                    b.Property<string>("Articul")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("articul");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int(8)")
                        .HasColumnName("catalog_id");

                    b.HasKey("UserId", "Articul", "CatalogId");

                    b.ToTable("favorite_items_1c");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("email");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("message");

                    b.Property<string>("Person")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("person");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("RecordTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("record_time_stamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<Guid>("ReviewerUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"))
                        .HasColumnName("user_id");

                    b.Property<int>("Type")
                        .HasColumnType("INT(11)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("ViewTimeStamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("view_time_stamp");

                    b.Property<bool>("Viewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("viewed");

                    b.HasKey("Id");

                    b.ToTable("feedback_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FeedbackFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("filename");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("parent_id");

                    b.Property<string>("VirtualPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("virtual_path");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("feedback_files");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.GalleryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("link");

                    b.Property<string>("LinkText")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("link_text");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("gallery_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("otdel");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("1c_manager", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.MenuContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("ImagePath")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValue("")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_authorize");

                    b.Property<bool>("IsSinglePage")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_single_page");

                    b.Property<bool>("IsVisibleInMenu")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible_in_menu");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("layout");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("meta_title");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<string>("TitleIconPath")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValue("")
                        .HasColumnName("title_icon_path");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("menu_contents");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("action_name");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("area_name");

                    b.Property<string>("BadgeTarget")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("badge_target");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("controller_name");

                    b.Property<string>("Icon")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("icon");

                    b.Property<int>("MenuType")
                        .HasColumnType("int")
                        .HasColumnName("menu_type");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("parent_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("menu_items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56fba3aa-25d8-4de6-b166-5da83192be99"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Home",
                            Icon = "krista-home",
                            MenuType = 999,
                            Order = 1,
                            Title = "Главная страница"
                        },
                        new
                        {
                            Id = new Guid("46ad49f1-21f3-48d9-bfa2-68137af8900b"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            BadgeTarget = "clientActionsTotal",
                            ControllerName = "Identity",
                            Icon = "krista-user",
                            MenuType = 999,
                            Order = 10,
                            Title = "Клиенты"
                        },
                        new
                        {
                            Id = new Guid("02f3a86a-1ff5-40f8-9ca5-ab76b2db1d7c"),
                            ActionName = "UserCartsReport",
                            AreaName = "Admin",
                            ControllerName = "Cart",
                            Icon = "krista-doc",
                            MenuType = 999,
                            Order = 15,
                            Title = "Отчеты"
                        },
                        new
                        {
                            Id = new Guid("909a2640-00af-4b7e-9c5f-f85597e93f69"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            BadgeTarget = "requestsTotal",
                            ControllerName = "Partnership",
                            Icon = "krista-crown",
                            MenuType = 999,
                            Order = 17,
                            Title = "Партнеры"
                        },
                        new
                        {
                            Id = new Guid("cedfe1cf-4c35-4ed0-a576-f05ab5e01414"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            BadgeTarget = "feedbackTotal",
                            ControllerName = "Feedback",
                            Icon = "krista-chat",
                            MenuType = 999,
                            Order = 20,
                            Title = "Связь с клиентами"
                        },
                        new
                        {
                            Id = new Guid("c66fe088-7df4-4739-bedb-147b843cb834"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "MBody",
                            Icon = "krista-media",
                            MenuType = 999,
                            Order = 30,
                            Title = "Мультимедия"
                        },
                        new
                        {
                            Id = new Guid("54297317-28ed-4abf-bd7f-bf3be9edac79"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Catalog",
                            Icon = "krista-hanger",
                            MenuType = 999,
                            Order = 40,
                            Title = "Работа с моделями"
                        },
                        new
                        {
                            Id = new Guid("8f1ff3c9-8f48-499d-ac33-240a3216f721"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Faq",
                            Icon = "krista-info",
                            MenuType = 999,
                            Order = 70,
                            Title = "Воронка"
                        },
                        new
                        {
                            Id = new Guid("c29da4a1-ea6d-4649-88a6-134fecb7bc24"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Settings",
                            Icon = "krista-settings",
                            MenuType = 999,
                            Order = 80,
                            Title = "Настройки системы"
                        },
                        new
                        {
                            Id = new Guid("2f7c02f6-3b20-4c61-a371-946d9a2b5764"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Staff",
                            Icon = "krista-staff",
                            MenuType = 999,
                            Order = 75,
                            Title = "Персонал"
                        },
                        new
                        {
                            Id = new Guid("b185169c-2738-4664-b5ce-0c8a98f0f227"),
                            ActionName = "ConsolidatedRequest",
                            AreaName = "Admin",
                            BadgeTarget = "",
                            ControllerName = "Orders",
                            Icon = "",
                            MenuType = 1,
                            Order = 26,
                            ParentId = new Guid("46ad49f1-21f3-48d9-bfa2-68137af8900b"),
                            Title = "Сводная заявка"
                        },
                        new
                        {
                            Id = new Guid("2b102b13-986e-422a-a058-c2dd4ee4d713"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            BadgeTarget = "",
                            ControllerName = "Partnership",
                            Icon = "",
                            MenuType = 1,
                            Order = 1,
                            ParentId = new Guid("909a2640-00af-4b7e-9c5f-f85597e93f69"),
                            Title = "Партнеры"
                        },
                        new
                        {
                            Id = new Guid("68d7f82c-8a8d-4650-a47b-7725c5e56d86"),
                            ActionName = "PaymentsHistory",
                            AreaName = "Admin",
                            BadgeTarget = "",
                            ControllerName = "Partnership",
                            Icon = "",
                            MenuType = 1,
                            Order = 10,
                            ParentId = new Guid("909a2640-00af-4b7e-9c5f-f85597e93f69"),
                            Title = "История взаиморасчетов"
                        },
                        new
                        {
                            Id = new Guid("326c52ed-1831-49ab-8a9b-c449f7bcfaba"),
                            ActionName = "SalesReport",
                            AreaName = "Admin",
                            BadgeTarget = "",
                            ControllerName = "Partnership",
                            Icon = "",
                            MenuType = 1,
                            Order = 20,
                            ParentId = new Guid("909a2640-00af-4b7e-9c5f-f85597e93f69"),
                            Title = "Отчет по продажам"
                        },
                        new
                        {
                            Id = new Guid("aefe9999-19b7-457c-babc-c96eee8d3dc0"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            BadgeTarget = "newUsers",
                            ControllerName = "Identity",
                            Icon = "",
                            MenuType = 1,
                            Order = 1,
                            ParentId = new Guid("46ad49f1-21f3-48d9-bfa2-68137af8900b"),
                            Title = "Клиенты"
                        },
                        new
                        {
                            Id = new Guid("647c76d8-9d6a-4167-928f-fdcc0e3e3ab2"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            BadgeTarget = "",
                            ControllerName = "Staff",
                            Icon = "",
                            MenuType = 1,
                            Order = 1,
                            ParentId = new Guid("2f7c02f6-3b20-4c61-a371-946d9a2b5764"),
                            Title = "Менеджеры"
                        },
                        new
                        {
                            Id = new Guid("df4f2c8a-8414-49c2-a4a3-31454b55936c"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            BadgeTarget = "newFeedback",
                            ControllerName = "Feedback",
                            Icon = "",
                            MenuType = 1,
                            Order = 1,
                            ParentId = new Guid("cedfe1cf-4c35-4ed0-a576-f05ab5e01414"),
                            Title = "Сообщения"
                        },
                        new
                        {
                            Id = new Guid("0f0bd978-3a1a-4fcd-b710-70b0b90e0ff7"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "MBody",
                            Icon = "",
                            MenuType = 1,
                            Order = 1,
                            ParentId = new Guid("c66fe088-7df4-4739-bedb-147b843cb834"),
                            Title = "Контент страниц"
                        },
                        new
                        {
                            Id = new Guid("ffc7d8ff-b78f-4c99-9bdd-8084d1a7c098"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Blog",
                            Icon = "",
                            MenuType = 1,
                            Order = 10,
                            ParentId = new Guid("c66fe088-7df4-4739-bedb-147b843cb834"),
                            Title = "Блог"
                        },
                        new
                        {
                            Id = new Guid("b525d487-7d6a-4b1c-8776-380a6b695462"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Gallery",
                            Icon = "",
                            MenuType = 1,
                            Order = 20,
                            ParentId = new Guid("c66fe088-7df4-4739-bedb-147b843cb834"),
                            Title = "Галерея"
                        },
                        new
                        {
                            Id = new Guid("9521365b-2f09-4138-b5b5-fe15d1dc2b70"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Banner",
                            Icon = "",
                            MenuType = 1,
                            Order = 30,
                            ParentId = new Guid("c66fe088-7df4-4739-bedb-147b843cb834"),
                            Title = "Баннер"
                        },
                        new
                        {
                            Id = new Guid("76f02dd3-31bf-4910-ba35-8ffdeb4398a7"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "VideoGallery",
                            Icon = "",
                            MenuType = 1,
                            Order = 40,
                            ParentId = new Guid("c66fe088-7df4-4739-bedb-147b843cb834"),
                            Title = "Видеогалерея"
                        },
                        new
                        {
                            Id = new Guid("9898ef9a-8e22-4fb4-ac98-a20911ffa5f3"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Catalog",
                            Icon = "",
                            MenuType = 1,
                            Order = 1,
                            ParentId = new Guid("54297317-28ed-4abf-bd7f-bf3be9edac79"),
                            Title = "Каталоги"
                        },
                        new
                        {
                            Id = new Guid("c9ef8cb8-ff17-4b9d-aa51-4da8c7e3d055"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Category",
                            Icon = "",
                            MenuType = 1,
                            Order = 10,
                            ParentId = new Guid("54297317-28ed-4abf-bd7f-bf3be9edac79"),
                            Title = "Категории"
                        },
                        new
                        {
                            Id = new Guid("cc811614-fdf0-4d4a-89c8-e23f9be12dc7"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "ModelsCatalog",
                            Icon = "",
                            MenuType = 1,
                            Order = 20,
                            ParentId = new Guid("54297317-28ed-4abf-bd7f-bf3be9edac79"),
                            Title = "Модели"
                        },
                        new
                        {
                            Id = new Guid("71c09087-a52b-4506-86ec-2677bd824ebf"),
                            ActionName = "History",
                            AreaName = "Admin",
                            ControllerName = "ModelsCatalog",
                            Icon = "",
                            MenuType = 1,
                            Order = 25,
                            ParentId = new Guid("54297317-28ed-4abf-bd7f-bf3be9edac79"),
                            Title = "Все модели"
                        },
                        new
                        {
                            Id = new Guid("07f0cd59-50a0-405b-9d3a-9a7134da7ef4"),
                            ActionName = "UserCartsReport",
                            AreaName = "Admin",
                            ControllerName = "Cart",
                            Icon = "",
                            MenuType = 1,
                            Order = 1,
                            ParentId = new Guid("02f3a86a-1ff5-40f8-9ca5-ab76b2db1d7c"),
                            Title = "Отчет по корзинам клиентов"
                        },
                        new
                        {
                            Id = new Guid("db0581b2-bdcd-400a-96ed-8fbfed3bcef4"),
                            ActionName = "UserUnprocessedOrdersReport",
                            AreaName = "Admin",
                            ControllerName = "OrderReports",
                            Icon = "",
                            MenuType = 1,
                            Order = 10,
                            ParentId = new Guid("02f3a86a-1ff5-40f8-9ca5-ab76b2db1d7c"),
                            Title = "Сводный отчет по необработанным заказам"
                        },
                        new
                        {
                            Id = new Guid("b7b8bc14-43ce-40d6-b728-cedaa80386b1"),
                            ActionName = "CitiesOrdersReport",
                            AreaName = "Admin",
                            ControllerName = "OrderReports",
                            Icon = "",
                            MenuType = 1,
                            Order = 15,
                            ParentId = new Guid("02f3a86a-1ff5-40f8-9ca5-ab76b2db1d7c"),
                            Title = "Отчет по городам"
                        },
                        new
                        {
                            Id = new Guid("15aa05a9-6c1c-4a04-b403-90f1ad7a4a66"),
                            ActionName = "TotalOrdersReport",
                            AreaName = "Admin",
                            ControllerName = "OrderReports",
                            Icon = "",
                            MenuType = 1,
                            Order = 20,
                            ParentId = new Guid("02f3a86a-1ff5-40f8-9ca5-ab76b2db1d7c"),
                            Title = "Сводный отчет по заказам"
                        },
                        new
                        {
                            Id = new Guid("f79ed663-09f4-42f8-9add-ac8551df6124"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Settings",
                            Icon = "",
                            MenuType = 1,
                            Order = 1,
                            ParentId = new Guid("c29da4a1-ea6d-4649-88a6-134fecb7bc24"),
                            Title = "Настройки"
                        },
                        new
                        {
                            Id = new Guid("f8949e4a-a06c-4955-94a5-c833968ea2a2"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Menu",
                            Icon = "",
                            MenuType = 1,
                            Order = 10,
                            ParentId = new Guid("c29da4a1-ea6d-4649-88a6-134fecb7bc24"),
                            Title = "Пункты меню"
                        },
                        new
                        {
                            Id = new Guid("6f8df031-accf-4c6d-90d0-52ebb21c6bff"),
                            ActionName = "Index",
                            AreaName = "Admin",
                            ControllerName = "Access",
                            Icon = "",
                            MenuType = 1,
                            Order = 20,
                            ParentId = new Guid("c29da4a1-ea6d-4649-88a6-134fecb7bc24"),
                            Title = "Права доступов"
                        },
                        new
                        {
                            Id = new Guid("4b8dec48-c770-4c56-8bb0-5c0409d4abef"),
                            ActionName = "Execute",
                            AreaName = "Admin",
                            ControllerName = "Import",
                            Icon = "",
                            MenuType = 1,
                            Order = 30,
                            ParentId = new Guid("c29da4a1-ea6d-4649-88a6-134fecb7bc24"),
                            Title = "Импорт"
                        });
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.ModelCatalogsInvisibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("id");

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("articul");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int(8)")
                        .HasColumnName("catalog_id");

                    b.HasKey("Id");

                    b.ToTable("model_catalogs_invisibility");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.ModelPhoto1C", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("id");

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("articul");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int(8)")
                        .HasColumnName("color_id");

                    b.Property<string>("OldPhotoPath")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("old_photo_path");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(6)")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("photo_path");

                    b.HasKey("Id");

                    b.HasIndex("Articul", "Order");

                    b.ToTable("model_photos_1c");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NewUsersCounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<long>("Counter")
                        .HasColumnType("bigint")
                        .HasColumnName("counter");

                    b.Property<DateTimeOffset?>("UpdateTimestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_time_stamp");

                    b.HasKey("Id");

                    b.ToTable("new_users_counter");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.NomCatalog1C", b =>
                {
                    b.Property<string>("Articul")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("articul");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int(8)")
                        .HasColumnName("catalog_id");

                    b.Property<int>("Order")
                        .HasColumnType("int(6)")
                        .HasColumnName("order");

                    b.HasKey("Articul", "CatalogId");

                    b.ToTable("nom_catalog_1c");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_date");

                    b.Property<int>("Direction")
                        .HasColumnType("int")
                        .HasColumnName("direction");

                    b.Property<ulong>("Number")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("number");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("parent_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("document_type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("part_documents");

                    b.HasDiscriminator<string>("document_type").HasValue("Document");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.DocumentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("articul");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("operation_date");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("document_id");

                    b.Property<Guid?>("FromDocumentId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("from_document_id");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_rub");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("size_value");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FromDocumentId");

                    b.HasIndex("ModelId");

                    b.ToTable("part_documents_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.DocumentNumberSequence", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("part_documents_sequence");

                    b.HasData(
                        new
                        {
                            Id = 1ul
                        });
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.Partner", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset>("DateApproved")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_approved");

                    b.Property<double>("PaymentRate")
                        .HasColumnType("double")
                        .HasColumnName("payment_rate");

                    b.HasKey("UserId");

                    b.ToTable("partners");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.PartnerExcessAndDeficiencyHistoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("articul");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_date");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_rub");

                    b.Property<int>("Resource")
                        .HasColumnType("int")
                        .HasColumnName("resource");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("size_value");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("part_excess_and_deficiency_history_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.PartnerStorehouseHistoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("articul");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_date");

                    b.Property<int>("Direction")
                        .HasColumnType("int")
                        .HasColumnName("movement_direction");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<int>("MovementType")
                        .HasColumnType("int")
                        .HasColumnName("movement_type");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_rub");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("part_storehouse_history_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.PartnerStorehouseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("articul");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<DateTimeOffset>("IncomeDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("income_date");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<int>("OrderType")
                        .HasColumnType("int")
                        .HasColumnName("order_type");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_rub");

                    b.Property<string>("SizeValue")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("part_storehouse_items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.PartnershipRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AnsweredDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("answered_date");

                    b.Property<bool>("IsAcceptedToProcess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_accepted_to_process");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_confirmed");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("requested_date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("part_partnership_requests");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.PromoLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("DeactivateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("link_deactivate_time");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("description");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("link");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<int>("OrderForm")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("title");

                    b.Property<string>("VideoPath")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("video_link");

                    b.Property<string>("VideoPreviewPath")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("video_preview_link");

                    b.HasKey("Id");

                    b.ToTable("promo_link");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.RoleAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("action");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("area");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("controller");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(521)
                        .HasColumnType("varchar(521)")
                        .HasColumnName("description");

                    b.Property<bool>("IsAccessGranted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_access_granted");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_accesses");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Settings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("key");

                    b.Property<bool>("OnlyRootAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("only_root_access");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("dict_settings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afd36311-a384-4105-946d-e2d388ab072c"),
                            Description = "Ссылка на оптовый аккаунт инстаграм",
                            Key = "KristaInstagram",
                            OnlyRootAccess = false,
                            Value = "https://www.instagram.com/krista.fashion/"
                        },
                        new
                        {
                            Id = new Guid("7f1c2461-2d69-4af4-9f77-15991cc420bd"),
                            Description = "Ссылка на оптовый аккаунт фэйсбук",
                            Key = "KristaFacebook",
                            OnlyRootAccess = false,
                            Value = "https://www.facebook.com/kristafashion-101281188115170/"
                        },
                        new
                        {
                            Id = new Guid("e509c422-9e1c-4372-bfc6-a0641ab65a55"),
                            Description = "Ссылка на оптовый аккаунт ютуб",
                            Key = "KristaYoutube",
                            OnlyRootAccess = false,
                            Value = "https://www.youtube.com/channel/UCXftbG5dwIDgWGR_WKOj5CQ"
                        },
                        new
                        {
                            Id = new Guid("6a2467aa-13de-45bf-9772-8d1a53f76541"),
                            Description = "Ссылка на подписку на оптовый аккаунт ютуб",
                            Key = "KristaYoutubeSubscribe",
                            OnlyRootAccess = false,
                            Value = "https://www.youtube.com/channel/UCXftbG5dwIDgWGR_WKOj5CQ?sub_confirmation=1"
                        },
                        new
                        {
                            Id = new Guid("f7c7016c-2a60-4e51-b6c5-9db7e61e1aa0"),
                            Description = "Ссылка на оптовый аккаунт в контакте",
                            Key = "KristaVk",
                            OnlyRootAccess = false,
                            Value = "https://www.vk.com/"
                        },
                        new
                        {
                            Id = new Guid("d5f1181d-89e6-4e6a-900e-2d0b5017f4f4"),
                            Description = "Путь к политике конфиденциальности",
                            Key = "TermsOfUse",
                            OnlyRootAccess = false,
                            Value = "/Privacy/Index"
                        },
                        new
                        {
                            Id = new Guid("5e3da824-8a53-4028-af75-f270bec049d0"),
                            Description = "Путь данным о доставке",
                            Key = "DeliveryDetails",
                            OnlyRootAccess = false,
                            Value = "/Cooperation/Delivery"
                        },
                        new
                        {
                            Id = new Guid("adee4fd9-878d-45a6-aed7-2cff2df6b123"),
                            Description = "Путь к данным об оплате",
                            Key = "PaymentDetails",
                            OnlyRootAccess = false,
                            Value = "/Cooperation/Payment"
                        },
                        new
                        {
                            Id = new Guid("b1a20574-b8db-41d0-b007-d77efa9219ee"),
                            Description = "Путь к контактам в футере",
                            Key = "FooterContacts",
                            OnlyRootAccess = false,
                            Value = "/Footer/Contacts"
                        },
                        new
                        {
                            Id = new Guid("d7863668-5d04-490d-b357-4c4aba7eb6d5"),
                            Description = "Путь к описанию на странице категориий",
                            Key = "CategoriesDescription",
                            OnlyRootAccess = false,
                            Value = "/Category/Index"
                        },
                        new
                        {
                            Id = new Guid("f4538f14-00df-4616-a3f7-d3edcf622fb2"),
                            Description = "Путь к дополнительному описанию открытого каталога при поиске",
                            Key = "OpenCatalogSearchDescription",
                            OnlyRootAccess = false,
                            Value = "/Search/OpenCatalog"
                        },
                        new
                        {
                            Id = new Guid("dfc70e24-ad7d-4283-9ad1-e9580af64ada"),
                            Description = "Сообщение при успешном совершениии покупки",
                            Key = "CartSuccess",
                            OnlyRootAccess = false,
                            Value = "Спасибо за покупку"
                        },
                        new
                        {
                            Id = new Guid("eac3bc5a-63d7-47c0-9e1c-55eb2a5ec864"),
                            Description = "Открытие регистрация. Значения: True - открыта. False - закрыта.",
                            Key = "IsRegistrationActive",
                            OnlyRootAccess = false,
                            Value = "True"
                        },
                        new
                        {
                            Id = new Guid("ff028c22-ed10-4fc0-b48c-db3efdeb7ffa"),
                            Description = "Сообщение для пользователя, когда регистрация закрыта",
                            Key = "InactiveRegistrationMessage",
                            OnlyRootAccess = false,
                            Value = "В данный момент регистрация на сайте закрыта"
                        },
                        new
                        {
                            Id = new Guid("2909fb6c-fb4a-4954-9057-774aa8f4e922"),
                            Description = "Сообщение для клиента, при отправке запроса на партнерство",
                            Key = "PartnershipRequestAcceptedToProcess",
                            OnlyRootAccess = false,
                            Value = "Ваша заявка принята в обработку. В ближайшее время наши менеджеры свяжутс с вами. Ожидайте пожалуйста"
                        },
                        new
                        {
                            Id = new Guid("a2695933-31c4-4a63-8088-4e2383e80c5c"),
                            Description = "Сообщение для клиента, если партнерство в его городе закрыто",
                            Key = "PartnershipRequestRejected",
                            OnlyRootAccess = false,
                            Value = "В данный момент мы не нуждаемся в партнерах в вашем регионе (городе). Но мы приняли вашу заявку и в случае необходимости свяжемся с вами"
                        },
                        new
                        {
                            Id = new Guid("bc492ac9-f0e0-4b7a-94c1-f628df3da268"),
                            Description = "Сообщение для клиента, если он уже подавал заявку на партнерство.",
                            Key = "PartnershipRequstActiveRequest",
                            OnlyRootAccess = false,
                            Value = "Вы уже подавали заявку. Пожалуйста, ожидайте связи с менеджером"
                        },
                        new
                        {
                            Id = new Guid("0f24ac33-cec2-4d84-be9f-8e0209fd5244"),
                            Description = "Для партнера - сумма к выплате поставщику за единицу",
                            Key = "DefaultPartnerPaymentRate",
                            OnlyRootAccess = false,
                            Value = "15.0"
                        });
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.UrlAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("description");

                    b.Property<bool>("ForManager")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("for_manager");

                    b.Property<bool>("ForRootOnly")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("for_root");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("url_access");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<double>("Balance")
                        .HasColumnType("double")
                        .HasColumnName("avansdolg");

                    b.Property<double>("BalanceInRub")
                        .HasColumnType("double")
                        .HasColumnName("avansdolgrub");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city");

                    b.Property<string>("CreateDate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("cdate");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsManager")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("imanager");

                    b.Property<string>("Login")
                        .HasColumnType("longtext")
                        .HasColumnName("login");

                    b.Property<string>("MallAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("addresstc");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password_md5");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<bool>("_accessToInStockLinesCatalog")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("access2");

                    b.Property<bool>("_accessToInStockPartsCatalog")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("access3");

                    b.Property<bool>("_accessToPreorder")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("access4");

                    b.Property<string>("_decryptedPassword")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ManagerId");

                    b.ToTable("1c_clients", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.UserData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset>("LastSignIn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_sign_in");

                    b.HasKey("UserId");

                    b.ToTable("user_data");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<string>("PreviewPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("preview_path");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("video_path");

                    b.HasKey("Id");

                    b.ToTable("gallery_video");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VideoGallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("description");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_open");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<string>("PreviewPath")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("preview_path")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("slug");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("title");

                    b.Property<string>("VideoPath")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("video_path")
                        .HasDefaultValueSql("''");

                    b.HasKey("Id");

                    b.ToTable("video_gallery");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VideoGalleryVideos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<Guid>("GalleryId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("gallery_id");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("binary(16)")
                        .HasColumnName("video_id");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.HasIndex("VideoId");

                    b.ToTable("video_gallery_videos");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Views.AppliedImportItem", b =>
                {
                    b.Property<DateTimeOffset>("ApplyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("apply_date");

                    b.Property<string>("BackupFile")
                        .HasColumnType("longtext")
                        .HasColumnName("backup_file_path");

                    b.Property<Guid>("Id")
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<string>("Key")
                        .HasColumnType("longtext")
                        .HasColumnName("key");

                    b.Property<string>("KeyValue")
                        .HasColumnType("longtext")
                        .HasColumnName("key_value");

                    b.Property<string>("Login")
                        .HasColumnType("longtext")
                        .HasColumnName("login");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("AppliedImportItem", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Views.CreateTableStatement", b =>
                {
                    b.Property<string>("CreateTable")
                        .HasColumnType("longtext")
                        .HasColumnName("Create Table");

                    b.Property<string>("Table")
                        .HasColumnType("longtext");

                    b.ToTable("CreateTableStatement", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Views.OrderTotalsSqlView", b =>
                {
                    b.Property<int>("PrepayPercent")
                        .HasColumnType("int")
                        .HasColumnName("prepay_percent");

                    b.Property<double>("Sum")
                        .HasColumnType("double")
                        .HasColumnName("sum");

                    b.Property<double>("SumInRub")
                        .HasColumnType("double")
                        .HasColumnName("sum_rub");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.ToTable("OrderTotalsSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Views.Partners.PartnerSqlView", b =>
                {
                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<int>("DebtItemsCount")
                        .HasColumnType("int")
                        .HasColumnName("debt_items_count");

                    b.Property<double>("DebtItemsSum")
                        .HasColumnType("double")
                        .HasColumnName("debt_items_sum");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<string>("Login")
                        .HasColumnType("longtext");

                    b.Property<string>("MallAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("addresstc");

                    b.Property<string>("ManagerName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<DateTimeOffset?>("PaymentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("payment_date");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<DateTimeOffset?>("RevisionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("revision_date");

                    b.Property<int>("ShipmentsItemsCount")
                        .HasColumnType("int")
                        .HasColumnName("shipments_items_count");

                    b.Property<double>("ShipmentsItemsSum")
                        .HasColumnType("double")
                        .HasColumnName("shipments_items_sum");

                    b.Property<int>("StorehouseItemsCount")
                        .HasColumnType("int")
                        .HasColumnName("storehouse_items_count");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("PartnerSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Views.Partners.PartnerStorehouseHistoryItemSqlView", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<string>("ColorCode")
                        .HasColumnType("longtext")
                        .HasColumnName("color_code");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorImage")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("item_create_date");

                    b.Property<int>("Direction")
                        .HasColumnType("int")
                        .HasColumnName("movement_direction");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<int>("MovementType")
                        .HasColumnType("int")
                        .HasColumnName("movement_type");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("model_name");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_rub");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("PartnerStorehouseHistoryItemSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Views.Partners.PartnerStorehouseItemSqlView", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Articul")
                        .HasColumnType("longtext")
                        .HasColumnName("articul");

                    b.Property<string>("Barcodes")
                        .HasColumnType("longtext")
                        .HasColumnName("barcodes");

                    b.Property<string>("ColorCode")
                        .HasColumnType("longtext")
                        .HasColumnName("color_code");

                    b.Property<string>("ColorGroupName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_group_name");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<string>("ColorImage")
                        .HasColumnType("longtext")
                        .HasColumnName("color_photo");

                    b.Property<string>("ColorName")
                        .HasColumnType("longtext")
                        .HasColumnName("color_name");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("main_photo");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("OrderType")
                        .HasColumnType("int")
                        .HasColumnName("order_type");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<double>("PriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("price_rub");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("size_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("PartnerStorehouseItemSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Views.Partners.PartnershipRequestSqlView", b =>
                {
                    b.Property<DateTime?>("AnsweredDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("answered_date");

                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<Guid>("Id")
                        .HasColumnType("binary(16)")
                        .HasColumnName("id");

                    b.Property<bool>("IsAcceptedToProcess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_accepted_to_process");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_confirmed");

                    b.Property<DateTime>("LastSignIn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_sign_in");

                    b.Property<string>("MallAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("addresstc");

                    b.Property<string>("ManagerName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("requested_date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("PartnershipRequestSqlView", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Views.ReportTotals", b =>
                {
                    b.Property<int>("CatalogId")
                        .HasColumnType("int")
                        .HasColumnName("catalog_id");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int")
                        .HasColumnName("total_amount");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double")
                        .HasColumnName("total_price");

                    b.Property<double>("TotalPriceInRub")
                        .HasColumnType("double")
                        .HasColumnName("total_price_rub");

                    b.ToTable("ReportTotals", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Views.Scalar", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.ToTable("Scalar", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Views.ScalarInt", b =>
                {
                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.ToTable("ScalarInt", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Views.ScalarULong", b =>
                {
                    b.Property<ulong>("Value")
                        .HasColumnType("bigint unsigned");

                    b.ToTable("ScalarLong", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Views.UserCartTotals", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("CityName")
                        .HasColumnType("longtext")
                        .HasColumnName("city_name");

                    b.Property<string>("ItemsArticuls")
                        .HasColumnType("longtext")
                        .HasColumnName("items_articuls");

                    b.Property<string>("ItemsCatalogIds")
                        .HasColumnType("longtext")
                        .HasColumnName("items_catalog_ids");

                    b.Property<string>("ItemsColorIds")
                        .HasColumnType("longtext")
                        .HasColumnName("items_color_ids");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("ManagerName")
                        .HasColumnType("longtext")
                        .HasColumnName("manager_name");

                    b.Property<int>("TotalItemsCount")
                        .HasColumnType("int")
                        .HasColumnName("total_items_count");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double")
                        .HasColumnName("total_price");

                    b.Property<double>("TotalPriceRub")
                        .HasColumnType("double")
                        .HasColumnName("total_price_rub");

                    b.Property<string>("UserFullName")
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.ToTable("UserCartTotals", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.MoneyDocument", b =>
                {
                    b.HasBaseType("KristaShop.DataAccess.Entities.Partners.Document");

                    b.Property<double>("Sum")
                        .HasColumnType("double")
                        .HasColumnName("sum");

                    b.HasDiscriminator().HasValue("MoneyDocument");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.StorehouseDocument", b =>
                {
                    b.HasBaseType("KristaShop.DataAccess.Entities.Partners.Document");

                    b.HasDiscriminator().HasValue("StorehouseDocument");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.PaymentDocument", b =>
                {
                    b.HasBaseType("KristaShop.DataAccess.Entities.Partners.MoneyDocument");

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasColumnName("state");

                    b.HasDiscriminator().HasValue("PaymentDocument");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.IncomeDocument", b =>
                {
                    b.HasBaseType("KristaShop.DataAccess.Entities.Partners.StorehouseDocument");

                    b.Property<DateTimeOffset>("ShipmentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("execution_date");

                    b.HasDiscriminator().HasValue("IncomeDocument");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.RevisionDeficiencyDocument", b =>
                {
                    b.HasBaseType("KristaShop.DataAccess.Entities.Partners.StorehouseDocument");

                    b.HasDiscriminator().HasValue("RevisionDeficiencyDocument");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.RevisionDocument", b =>
                {
                    b.HasBaseType("KristaShop.DataAccess.Entities.Partners.StorehouseDocument");

                    b.HasDiscriminator().HasValue("RevisionDocument");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.RevisionExcessDocument", b =>
                {
                    b.HasBaseType("KristaShop.DataAccess.Entities.Partners.StorehouseDocument");

                    b.HasDiscriminator().HasValue("RevisionExcessDocument");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.SellingDocument", b =>
                {
                    b.HasBaseType("KristaShop.DataAccess.Entities.Partners.StorehouseDocument");

                    b.HasDiscriminator().HasValue("SellingDocument");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.CatalogDiscount", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Catalog", "Catalog")
                        .WithMany("CatalogDiscounts")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.ManagerAccess", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.DataFor1C.ManagerDetails", "ManagerDetails")
                        .WithMany("Accesses")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManagerDetails");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.ManagerDetails", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Role", "Role")
                        .WithMany("ManagerDetails")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.OrderDetails", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.DataFor1C.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.Color", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.DataFrom1C.ColorGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("ExcludeForeignKeyMigration94e100012e5c481c90839724bc1cc869");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFrom1C.Model", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.CatalogItemDescriptor", "Descriptor")
                        .WithMany()
                        .HasForeignKey("Articul")
                        .HasConstraintName("ExcludeForeignKeyMigrationbde9af81fea34a4c93a93957645659d0")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.DataFrom1C.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .HasConstraintName("ExcludeForeignKeyMigrationfdf41488f81e404895278b1693207b98");

                    b.Navigation("Collection");

                    b.Navigation("Descriptor");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSection", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Faq", "Faq")
                        .WithMany("FaqSections")
                        .HasForeignKey("FaqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faq");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContent", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.FaqSection", "FaqSection")
                        .WithMany("FaqSectionContents")
                        .HasForeignKey("FaqSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaqSection");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContentFile", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.FaqSectionContent", "FaqSectionContent")
                        .WithMany("FaqSectionContentFiles")
                        .HasForeignKey("FaqSectionContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaqSectionContent");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FeedbackFile", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Feedback", "Feedback")
                        .WithMany("Files")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Manager", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.DataFor1C.ManagerDetails", "Details")
                        .WithOne("Manager")
                        .HasForeignKey("KristaShop.DataAccess.Entities.Manager", "Id")
                        .HasConstraintName("ExcludeForeignKeyMigration485c8082ccbf4e45891a1a1637f998dd")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Details");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.MenuItem", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.MenuItem", "ParentItem")
                        .WithMany("ChildItems")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentItem");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.Document", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Partners.Document", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("KristaShop.DataAccess.Entities.Partners.Partner", "Partner")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ExcludeForeignKeyMigration12d157becccc47a6ac6bdb4e4316ac18")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.DocumentItem", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.DataFrom1C.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .HasConstraintName("ExcludeForeignKeyMigrationea837ae8c24c468ca3a14c306123fa2c")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.Partners.Document", "Document")
                        .WithMany("Items")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.Partners.Document", "FromDocument")
                        .WithMany()
                        .HasForeignKey("FromDocumentId");

                    b.HasOne("KristaShop.DataAccess.Entities.DataFrom1C.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .HasConstraintName("ExcludeForeignKeyMigration62d32770265d461a8fe80fb1ef5ff62d")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Document");

                    b.Navigation("FromDocument");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.Partner", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("ExcludeForeignKeyMigration000c1b29757c46d4aec47bc235736b31")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.RoleAccess", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.Role", "Role")
                        .WithMany("Accesses")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.User", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.DataFrom1C.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasConstraintName("ExcludeForeignKeyMigration98c7332e12a14a2d8f6a106ca3728924");

                    b.HasOne("KristaShop.DataAccess.Entities.Manager", "Manager")
                        .WithMany("Users")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("ExcludeForeignKeyMigrationf1a6c4b5b6814509b4f204d2cfd07601");

                    b.Navigation("City");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.UserData", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.User", "User")
                        .WithOne("Data")
                        .HasForeignKey("KristaShop.DataAccess.Entities.UserData", "UserId")
                        .HasConstraintName("ExcludeForeignKeyMigration9a76e2c12bcc4866b3c42569f363bfbe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VideoGalleryVideos", b =>
                {
                    b.HasOne("KristaShop.DataAccess.Entities.VideoGallery", "Gallery")
                        .WithMany("VideoGalleryVideos")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KristaShop.DataAccess.Entities.Video", "Video")
                        .WithMany("VideoGalleryVideos")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Catalog", b =>
                {
                    b.Navigation("CatalogDiscounts");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.ManagerDetails", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.DataFor1C.Order", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Faq", b =>
                {
                    b.Navigation("FaqSections");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSection", b =>
                {
                    b.Navigation("FaqSectionContents");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.FaqSectionContent", b =>
                {
                    b.Navigation("FaqSectionContentFiles");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Feedback", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Manager", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.MenuItem", b =>
                {
                    b.Navigation("ChildItems");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.Document", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Partners.Partner", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Role", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("ManagerDetails");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Data");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.Video", b =>
                {
                    b.Navigation("VideoGalleryVideos");
                });

            modelBuilder.Entity("KristaShop.DataAccess.Entities.VideoGallery", b =>
                {
                    b.Navigation("VideoGalleryVideos");
                });
#pragma warning restore 612, 618
        }
    }
}
